{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is FCLite","text":"<p>FCLite API is an application programming interface (API) that allows you to access the FXCM trading platform and execute various trading operations. It is designed to be fast, flexible, and reliable for algorithmic and automated trading.</p> <p>FCLite API supports various data providers, such as SQL Server, Oracle, MySQL, SQLite, and more. It also supports various data types, parameters, transactions, bulk operations, caching, logging, and tracing. You can use FCLite API to perform both query and command operations, such as getting live and historical prices, creating and modifying orders, managing positions, and receiving market data updates.</p> <p>FCLite API is compatible with .NET applications and can be easily installed using the NuGet Package Manager in Visual Studio or the dotnet CLI tool. You can also find the source code and documentation on the  GitHub repository.</p> <p>FCLite API is developed and maintained by  Gehtsoft USA LLC, a software development company that specializes in complex and mission-critical projects for various industries, such as finance, trading, education, and healthcare.</p> <p>If you have any questions, feedback, or issues regarding FCLite API, please feel free to  contact us  or  open an issue  on GitHub.</p> <p>We hope you enjoy using FCLite API and find it useful for your trading needs.</p>"},{"location":"examples/deletedata/","title":"Delete Data","text":"<p>This is normal content without tabs.</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre>"},{"location":"installation/configurationandsettings/","title":"Configuration and Settings","text":"<p>After you download and install FCLite API, you need to configure some settings to use it in your application. Here are the main steps that you need to follow:</p> <p>Create a configuration file for FCLite API, which contains the information about the server URL, the access token, the log level, and the log file path. You can use the sample configuration file provided by Gehtsoft USA LLC here: https://docs.gehtsoftusa.com/fclite/#configuration.html Load the configuration file in your code using the FCLite API methods for your language. For example, if you use C++, you can use the method FXCM::Config::load(const char* fileName) to load the configuration file from a given file name. Create a session object for FCLite API, which represents a connection to the FXCM trading platform. You can use the FCLite API methods for your language to create and manage the session object. For example, if you use C++, you can use the method FXCM::Session::create() to create a session object. Use the session object to perform various trading operations with FCLite API, such as logging in, logging out, subscribing to market data, placing orders, modifying trades, retrieving historical data, and more. You can use the FCLite API methods for your language to access and manipulate the session object. For example, if you use C++, you can use the method FXCM::Session::login() to log in to the FXCM trading platform using the session object. For more details on how to configure and use FCLite API for each language, you can refer to the documentation and examples provided by Gehtsoft USA LLC here: https://docs.gehtsoftusa.com/fclite/#howto.html</p> <p>If you encounter any problems or have any questions during the configuration process, you can contact Gehtsoft USA LLC's support team at support@gehtsoftusa.com or visit their website at https://gehtsoftusa.com/.</p>"},{"location":"installation/downloadandinstall/","title":"Download and Install","text":"<p>To download and install FCLite API, you need to follow these steps:</p> <p>The first step of adding FXLite to your project is to ensure that you have the npm application installed if you are using a Microsoft Windows computer. </p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>The next step is to create a file named .npmrc in the root of your project containing a single command:</p> <pre><code>@gehtsoft:registry=https://www.myget.org/F/gehtsoft-public/npm/\n</code></pre> <p>You should open a command prompt and change to the directory containing your project. Then you need to execute the command:</p> <p>npm install @gehtsoft/forex-connect-lite</p> <p>This will download two packages to your project directory: forex-connect-lite to work in browser and forex-connect-lite-node for node projects. Now you can access the FXLite API from your project.</p>"},{"location":"installation/prerequisites/","title":"Prerequisites","text":"<p>Before you start using FCLite, you need to make sure that you have the following prerequisites:</p> <ul> <li>NetCore SDK 5.0 Installation Instructions Minimum Requirements (https://learn.microsoft.com/en-us/dotnet/core/install/),</li> <li>NodeJS v.14.21.3 or higher Minimum requirements installation instructions (https://nodejs.org/en/download),</li> <li>Java 8 JDK or higher (https://www.java.com/ru/download/help/download_options_ru.html),</li> <li> <p>Apache Maven (https://maven.apache.org/download.cgi).</p> </li> <li> <p>A trading account with Forex Capital Markets (FXCM), one of the world's leading providers of online foreign exchange trading, CFD trading, and related services.You can open a demo or a live account here: https://www.fxcm.com/uk/</p> </li> <li>A valid access token for FCLite API, which you can obtain from FXCM after opening an account. You will need this token to authenticate your requests to the API.</li> <li>A compatible programming language and environment for FCLite API, which supports C++, Java, .NET, and Python. You can find the documentation and examples for each language here: https://docs.gehtsoftusa.com/fclite/#howto.html</li> <li>A basic understanding of how FCLite API works and what it can do for you. FCLite is a powerful and flexible API that allows you to access FXCM's trading platform and execute various trading operations, such as placing orders, modifying trades, subscribing to market data, retrieving historical data, and more. FCLite is developed by Gehtsoft USA LLC, a software development company that specializes in custom FinTech solutions and system integration1.</li> <li>If you have any questions or issues with FCLite API, you can contact Gehtsoft USA LLC's support team at support@gehtsoftusa.com or visit their website at https://gehtsoftusa.com/.</li> </ul> <p>FCLite requires 1GB of free disk space and an Internet connection:  You will need to download about 100 MB of external dependencies.  At least 4 GB RAM and 2 free CPU cores are recommended.</p>"},{"location":"introduction/howdoesfclitework/","title":"How does FCLite work?","text":"<p>FCLite is a powerful and flexible API that allows you to access the Forex Capital Markets (FXCM) trading platform and execute various trading operations. FCLite is developed by Gehtsoft USA LLC, a leading software development company that specializes in custom FinTech solutions1.</p> <p>FCLite is based on the Forex Connect API, which was originally designed by Gehtsoft for FXCM and has been widely used by millions of traders and brokers around the world1. FCLite is a re-coded and improved version of Forex Connect that offers better performance, stability, and compatibility.</p> <p>With FCLite, you can: - Connect to FXCM servers and get real-time market data. - Place, modify, and cancel orders. - Monitor your account balance, equity, margin, and positions. - Subscribe to price updates and market events. - Execute custom trading strategies and algorithms.</p> <p>FCLite supports multiple programming languages, such as C++, Java, .NET, TypeScript, JavaScript, Go, and more. You can use FCLite with various platforms and devices, such as Windows, Linux, MacOS, iOS, Android, web browsers, etc.</p> <p>FCLite is easy to use and integrate with your existing applications. You can download the FCLite SDK from gehtsoftusa.com and follow the documentation and examples to get started. You can also contact Gehtsoft for technical support and custom development services.</p> <p>FCLite is a reliable and secure API that complies with FXCM's policies and regulations. You can trust FCLite to handle your trading needs with speed and accuracy.</p>"},{"location":"introduction/whatisfclite/","title":"What is FCLite","text":"<p>FCLite API is an application programming interface (API) that allows you to access the FXCM trading platform and execute various trading operations. It is designed to be fast, flexible, and reliable for algorithmic and automated trading.</p> <p>FCLite API supports various data providers, such as SQL Server, Oracle, MySQL, SQLite, and more. It also supports various data types, parameters, transactions, bulk operations, caching, logging, and tracing. You can use FCLite API to perform both query and command operations, such as getting live and historical prices, creating and modifying orders, managing positions, and receiving market data updates.</p> <p>FCLite API is compatible with .NET applications and can be easily installed using the NuGet Package Manager in Visual Studio or the dotnet CLI tool. You can also find the source code and documentation on the  GitHub repository.</p> <p>FCLite API is developed and maintained by  Gehtsoft USA LLC, a software development company that specializes in complex and mission-critical projects for various industries, such as finance, trading, education, and healthcare.</p> <p>If you have any questions, feedback, or issues regarding FCLite API, please feel free to  contact us  or  open an issue  on GitHub.</p> <p>We hope you enjoy using FCLite API and find it useful for your trading needs.</p>"},{"location":"introduction/whyusefclite/","title":"Why use FCLite","text":"<p>FCLite is a powerful and flexible API that allows you to access and trade on the Forex Capital Markets platform. With FCLite, you can create custom applications, scripts and strategies that suit your trading needs and preferences. </p> <p>FCLite provides you with a comprehensive set of classes and interfaces that cover all aspects of trading, such as accounts, instruments, orders, positions, prices, margins, rollovers and more. </p> <p>FCLite also supports multiple languages, platforms and protocols, making it easy to integrate with your existing systems and tools. Whether you are a beginner or an expert trader, FCLite can help you enhance your trading experience and performance with Forex Capital Markets.</p>"},{"location":"trading/addstoplimit/","title":"Adding Stop/Limit","text":"<p>Adding Stop/Limit</p> <p>This article will show you how to how to attach a stop limit order to a position or an order. A stop limit order is a special kind of order that lets you set a price range for buying or selling an instrument. It has two parts: a stop price and a limit price. The stop price is the level that activates the order. The limit price is the level that executes the order.</p> <p>For example, suppose you want to buy EUR/USD at 1.2000, but you don't want to pay more than 1.2050. You can place a stop limit order with a stop price of 1.2000 and a limit price of 1.2050. This means that when the market price reaches 1.2000, your order will become active and try to buy EUR/USD at 1.2050 or lower. However, if the market price jumps above 1.2050 before your order is executed, your order will not be filled.</p> <p>You can use a stop limit order to protect your profits or limit your losses on an existing position, or to enter a new position at a specific price range. To do this, you need to use the FCLite library, which is a Java package that connects to the trading platform's API.</p> Creating the Managers <p>To add a stop limit order to a position or an order, you need to follow these steps: 1. Create a Session object that allows you to connect to the server and log in with your credentials. 2. Create an OpenPositionsManager object that allows you to manage the open positions. 3. Create an OrdersManager object that allows you to manage the orders.</p> <p>Creating these objects is simple as you can see below.</p> TYPESCRIPTJAVASCRIPT <pre><code>let openPositionsManager = session.getOpenPositionsManager(); // get open positions manager\nlet ordersManager = session.getOrdersManager(); // get orders manager\n</code></pre> <pre><code>let openPositionsManager = session.getOpenPositionsManager(); // get open positions manager\nlet ordersManager = session.getOrdersManager(); // get orders manager\n</code></pre> Creating the Listeners <ol> <li>Add order change listeners to the OpenPositionsManager and OrdersManager objects to handle the events related to the orders and positions.</li> </ol> TYPESCRIPTJAVASCRIPT <pre><code>const orderChangeListener = new OrderChangeListener(ordersManager, openPositionsManager); //create listener on the two created managers\nsession.getOrdersManager().subscribeOrderChange(orderChangeListener); //attach the listener to the session object to make it active.\n</code></pre> <pre><code>let orderChangeListener = new OrderChangeListener(ordersManager, openPositionsManager); //create listener on the two created managers\nsession.getOrdersManager().subscribeOrderChange(orderChangeListener); //attach the listener to the session object to make it active.\n</code></pre> <p>See also IOpenPositionsManager, IOrdersManager, subscribeOrderChange</p> Creating the Listeners: Usage <p>Get the ID of the position or order that you want to attach a stop limit order to.  You can use the GetPositions or GetOrders methods of the Session object to retrieve the positions or orders. Specify the parameters of the stop limit order, such as: - The stop price, the limit price, and the quantity.  - The stop price is the price at which the stop limit order will be triggered.  - The limit price is the price at which the stop limit order will be executed.  - The quantity is the number of contracts or shares to trade.</p> <p>Below you can see some example code for creating the listeners that are used above:</p> TYPESCRIPTJAVASCRIPT <pre><code>class OrderChangeListener implements FXConnectLite.IOrderChangeListener {\nconstructor(private ordersManager: FXConnectLite.IOrdersManager, private openPositionsManager: FXConnectLite.IOpenPositionsManager) {\n\n}\nonChange(orderInfo) {\nconst order = this.ordersManager.getOrderById(orderInfo.getOrderId());\nPrinter.print(`changed order ${orderInfo.getOrderId()} status ${order.getStatus()}`);\n}\nonAdd(orderInfo) {\nconst order = this.ordersManager.getOrderById(orderInfo.getOrderId());\nPrinter.print(\"added order, id = \" + orderInfo.getOrderId()+ \", type = \" + order.getType());\nif(order.getTradeId() != null &amp; (order.getType() == \"L\" || order.getType() == \"S\")) {\nlet openPosition = this.openPositionsManager.getOpenPosition(order.getTradeId());\nPrinter.print(`OpenPosition ${order.getTradeId()} changed. Stop or limit order is attached.`)\nPrinter.print(OpenPositionFormatter.TITLE);\nPrinter.print(OpenPositionFormatter.format(openPosition));\n}\n}\nonDelete(orderInfo) {\nPrinter.print(\"deleted order \" + orderInfo.getOrderId());\n}\nonError(orderInfo) {\nPrinter.print(\"order error \" + orderInfo.getError().getMessage());\n}\n}\n</code></pre> <pre><code>let OrderChangeListener = /** @class */ (function () {\nfunction OrderChangeListener(ordersManager, openPositionsManager) {\nthis.ordersManager = ordersManager;\nthis.openPositionsManager = openPositionsManager;\n}\nOrderChangeListener.prototype.onChange = function (orderInfo) {\nvar order = this.ordersManager.getOrderById(orderInfo.getOrderId());\nconsole.log(\"changed order \".concat(orderInfo.getOrderId(), \" status \").concat(order.getStatus()));\n};\nOrderChangeListener.prototype.onAdd = function (orderInfo) {\nvar order = this.ordersManager.getOrderById(orderInfo.getOrderId());\nconsole.log(\"added order, id = \" + orderInfo.getOrderId() + \", type = \" + order.getType());\nif (order.getTradeId() != null &amp; (order.getType() == \"L\" || order.getType() == \"S\")) {\nvar openPosition = this.openPositionsManager.getOpenPosition(order.getTradeId());\nconsole.log(\"OpenPosition \".concat(order.getTradeId(), \" changed. Stop or limit order is attached.\"));\nconsole.log(OpenPositionFormatter.TITLE);\nconsole.log(OpenPositionFormatter.format(openPosition));\n}\n};\nOrderChangeListener.prototype.onDelete = function (orderInfo) {\nconsole.log(\"deleted order \" + orderInfo.getOrderId());\n};\nOrderChangeListener.prototype.onError = function (orderInfo) {\nconsole.log(\"order error \" + orderInfo.getError().getMessage());\n};\nreturn OrderChangeListener;\n}());\n</code></pre> <p>See also OrderInfo, IOrdersManager, getOrderById, getOpenPosition, Order</p> Creating the stop and limit order for an open position and an order <p>The method below shows how to create a stop and limit order for an open position and an order:</p> TYPESCRIPTJAVASCRIPT <pre><code>private attachStopLimitOrderForTradeAndOrder = async (session: FXConnectLite.IFXConnectLiteSession, tradeId: string, orderId: string, type: string, timeout : number) =&gt; {\nreturn new Promise&lt;void&gt;(async (resolve, reject) =&gt; {\nlet manager = session.getOrdersManager();\n\nconst openPosition = session.getOpenPositionsManager().getOpenPosition(tradeId);\n\nif (type === 'stop') {\nlet builder = manager.getRequestFactory().createStopOrderRequestBuilder();\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setOrderId(orderId);\nbuilder.setRate(openPosition.getOpenRate() - openPosition.getOpenRate()/100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nlet builder = manager.getRequestFactory().createLimitOrderRequestBuilder();\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setOrderId(orderId);\nbuilder.setRate(openPosition.getOpenRate() + openPosition.getOpenRate()/100);\nmanager.createLimitOrder(builder.build());\n}\n\nsetTimeout(function () { resolve(); }, timeout);\n});\n}\n</code></pre> <pre><code>this.attachStopLimitOrderForTradeAndOrder = async function (session, tradeId, orderId, type, timeout){\nreturn new Promise(function (resolve, reject) {\nmanager = session.getOrdersManager();\nopenPosition = session.getOpenPositionsManager().getOpenPosition(tradeId); //get open position by trade Id\nif (type === 'stop') {\nbuilder = manager.getRequestFactory().createStopOrderRequestBuilder(); // if stop create stop order using builder\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setOrderId(orderId);\nbuilder.setRate(openPosition.getOpenRate() - openPosition.getOpenRate() / 100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nbuilder = manager.getRequestFactory().createLimitOrderRequestBuilder(); //create limit order using builder\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setOrderId(orderId);\nbuilder.setRate(openPosition.getOpenRate() + openPosition.getOpenRate() / 100);\nmanager.createLimitOrder(builder.build());\n}\nsetTimeout(function () { resolve(); }, timeout);\nresolve()\n});\n};\n</code></pre> <p>Use the attachStopLimitOrderForTradeAndOrder method of the this object to add a stop limit order to the position or order. The method returns a StopLimitOrder object that represents the created stop limit order.</p> Stop and limit order for an open position and an order: Usage <p>The example code below shows how you can use the above method to create a stop and limit order for an open position and an order:</p> TYPESCRIPTJAVASCRIPT <pre><code>if (tradeId &amp; orderId) {\nconst openPositions = session.getOpenPositionsManager().getOpenPositionsSnapshot();\nif (openPositions.length &gt; 0) {\nthis.printOpenPositionsSnapshot(openPositions);\nreturn this.attachStopLimitOrderForTradeAndOrder(session, options.tradeId, options.orderId, options.orderType, this.timeout);\n}\nelse {\nPrinter.print(`No open positions`)\nthis.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\n</code></pre> <pre><code>if (tradeId &amp; orderId) {\nvar openPositions = session.getOpenPositionsManager().getOpenPositionsSnapshot();\nif (openPositions.length &gt; 0) {\n_this.printOpenPositionsSnapshot(openPositions); //show properties\nreturn _this.attachStopLimitOrderForTradeAndOrder(session, tradeId, orderId, orderType, _this.timeout);\n}\nelse {\nconsole.log(\"No open positions\");\n_this.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\n</code></pre> <p>See also IOpenPositionsManager, getOpenPositionsSnapshot</p> Stop and limit order for an open position only <p>This method below shows how to create a stop and limit order for an open position only:</p> TYPESCRIPTJAVASCRIPT <pre><code>private attachStopLimitOrderForTrade = async (session: FXConnectLite.IFXConnectLiteSession, tradeId: string, type: string, timeout : number) =&gt; {\nreturn new Promise&lt;void&gt;(async (resolve, reject) =&gt; {\nlet manager = session.getOrdersManager();\n\nconst openPosition = session.getOpenPositionsManager().getOpenPosition(tradeId);\n\nif (type === 'stop') {\nlet builder = manager.getRequestFactory().createStopOrderRequestBuilder();\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setRate(openPosition.getOpenRate() - openPosition.getOpenRate()/100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nlet builder = manager.getRequestFactory().createLimitOrderRequestBuilder();\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setRate(openPosition.getOpenRate() + openPosition.getOpenRate()/100);\nmanager.createLimitOrder(builder.build());\n}\n\nsetTimeout(function () { resolve(); }, timeout);\n});\n}\n</code></pre> <pre><code>this.attachStopLimitOrderForTrade = async function (session, tradeId, type, timeout){\nreturn new Promise(function (resolve, reject) {\nvar manager, openPosition, builder, builder;\nmanager = session.getOrdersManager();\nopenPosition = session.getOpenPositionsManager().getOpenPosition(tradeId); //get open position by trade Id\nif (type === 'stop') {\nbuilder = manager.getRequestFactory().createStopOrderRequestBuilder(); // if stop create stop order using builder\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setRate(openPosition.getOpenRate() - openPosition.getOpenRate() / 100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nbuilder = manager.getRequestFactory().createLimitOrderRequestBuilder(); //create limit order using builder\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setRate(openPosition.getOpenRate() + openPosition.getOpenRate() / 100);\nmanager.createLimitOrder(builder.build());\n}\nsetTimeout(function () { resolve(); }, timeout);\nresolve();\n});\n};\n</code></pre> <p>See also OpenPosition, IOrdersManager, createStopOrder, createLimitOrder, Order, getRequestFactory, createStopOrderRequestBuilder, StopOrderRequestBuilder</p> Stop and limit order for an open position only: Usage <p>The example code below shows how to use the Stop and limit order function example above for the open position only method:</p> TYPESCRIPTJAVASCRIPT <pre><code>if (tradeId) {\nconst openPositions = session.getOpenPositionsManager().getOpenPositionsSnapshot();\nif (openPositions.length &gt; 0) {\nthis.printOpenPositionsSnapshot(openPositions);\nreturn this.attachStopLimitOrderForTrade(session, options.tradeId, options.orderType, this.timeout);\n}\nelse {    Printer.print(`No open positions`)\nthis.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\n</code></pre> <pre><code>if (tradeId) {\nlet openPositions = session.getOpenPositionsManager().getOpenPositionsSnapshot();\nif (openPositions.length &gt; 0) {\n_this.printOpenPositionsSnapshot(openPositions); // show properties\nreturn _this.attachStopLimitOrderForTrade(session, tradeId, orderType, _this.timeout);\n}\nelse {\nconsole.log(\"No open positions\");\n_this.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\n</code></pre> <p>See also IOpenPositionsManager, getOpenPositionsSnapshot</p> Stop and limit order for order only <p>This method below shows how to create a stop and limit order for order only</p> TYPESCRIPTJAVASCRIPT <pre><code>private attachStopLimitOrderForOrder = async (session: FXConnectLite.IFXConnectLiteSession, orderId: string, type: string, timeout : number) =&gt; {\nreturn new Promise&lt;void&gt;(async (resolve, reject) =&gt; {\nlet manager = session.getOrdersManager();\nconst order = session.getOrdersManager().getOrderById(orderId);\n\nif (type === 'stop') {\nlet builder = manager.getRequestFactory().createStopOrderRequestBuilder();\nbuilder.setOrderId(order.getOrderId());\nbuilder.setRate(order.getRate() + order.getRate()/100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nlet builder = manager.getRequestFactory().createLimitOrderRequestBuilder();\nbuilder.setOrderId(order.getOrderId());\nbuilder.setRate(order.getRate() - order.getRate()/100);\nmanager.createLimitOrder(builder.build());\n}\n\nsetTimeout(function () { resolve(); }, timeout);\n});\n}\n</code></pre> <pre><code>this.attachStopLimitOrderForOrder = function (session, orderId, type, timeout){\nreturn new Promise(function (resolve, reject) {\nmanager = session.getOrdersManager();\norder = session.getOrdersManager().getOrderById(orderId); //get order by order Id\nif (type === 'stop') {\nbuilder = manager.getRequestFactory().createStopOrderRequestBuilder(); // if stop create stop order using builder\nbuilder.setOrderId(order.getOrderId());\nbuilder.setRate(order.getRate() + order.getRate() / 100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nbuilder = manager.getRequestFactory().createLimitOrderRequestBuilder(); //create limit order using builder\nbuilder.setOrderId(order.getOrderId());\nbuilder.setRate(order.getRate() - order.getRate() / 100);\nmanager.createLimitOrder(builder.build());\n}\nsetTimeout(function () { resolve(); }, timeout);\nresolve();\n});\n};\n</code></pre> <p>See also OpenPosition, IOrdersManager, createStopOrder, createLimitOrder, Order, getRequestFactory, createStopOrderRequestBuilder, StopOrderRequestBuilder</p> Stop and limit order for order only: Usage <p>The example code below shows how to use the Stop and limit order method for order only</p> TYPESCRIPTJAVASCRIPT <pre><code>if (orderId) {\nconst orders = session.getOrdersManager().getOrdersSnapshot();\nif (orders.length &gt; 0) {\nthis.printOrdersSnapshot(orders);\nreturn this.attachStopLimitOrderForOrder(session, options.orderId, options.orderType, this.timeout);\n}\nelse {\nPrinter.print(`No open positions`)\nthis.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n} </code></pre> <pre><code>if (orderId) {\nvar orders = session.getOrdersManager().getOrdersSnapshot();\nif (orders.length &gt; 0) {\n_this.printOrdersSnapshot(orders); //show properties\nreturn _this.attachStopLimitOrderForOrder(session, orderId, orderType, _this.timeout);\n}\nelse {\nconsole.log(\"No open positions\");\n_this.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\nelse {\nconsole.log(\"Error: OrderId or tradeId must be specified.\");\n_this.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n</code></pre> <p>See also IOrdersManager, getOrdersSnapshot</p> <p>Download the sample TypeScript, JavaScript</p> <p>In order to perform changes to Stop/Limit, you should understand that the sto pand limits are also orders,  however they are orders specifically associated with an open position order or order.  So, you first need to get the main order and then locate the associated Stop/Limit order and then perform an update on that order or Cancel it.</p> <p>See Also ...</p>"},{"location":"trading/closeallpositions/","title":"Close All Open Positions","text":"<p>How to close all open positions Overview</p> <p>This article explains how to close all open positions using the orders manager. Closing all open positions means you exit the market and liquidate your assets.  You can close all open positions at once, or filter them by instrument or direction.</p> <p>Before you can close all open positions, you need to: - Create an orders manager. See How to create orders manager for more details. - Create a request builder. See the next section for an example. - Create a listener function that handles the success or failure of the closing action. See the last section for an example.</p> Creating a request builder <p>A request builder is an object that defines the parameters of the closing action. You can create a request builder using the orders manager's getRequestFactory method and passing it the createCloseAllPositionsRequestBuilder method.</p> <p>You can use this requestBuilder example:</p> TYPESCRIPTJAVASCRIPT <pre><code>let requestBuilder: FXConnectLite.CloseAllPositionsRequestBuilder = ordersManager.getRequestFactory().createCloseAllPositionsRequestBuilder();\nrequestBuilder.setCustomId(\"CloseOpenPositions#1\")\n.setAcctId(options.account)\n.setTimeInForce(\"GTC\");\n</code></pre> <pre><code>let requestBuilder = ordersManager\n.getRequestFactory()\n.createCloseAllPositionsRequestBuilder();\nrequestBuilder\n.setCustomId(\"CloseOpenPositions#1\")\n.setAcctId(options.account)\n.setTimeInForce(\"GTC\")\n</code></pre> <p>By default, the request builder will close all open positions. If you want to close only specific positions, you can add filters to the request builder by calling one or both of these methods:</p> <p>setSymbol: This method takes an instrument symbol as an argument and closes only the positions for that instrument. setSide: This method takes a direction (buy or sell) as an argument and closes only the positions in that direction.</p> <p>For example, this code when added to the requestBuilder will close all buy positions for EUR/USD:</p> TYPESCRIPTJAVASCRIPT <pre><code>requestBuilder.setSide(\"B\");\nrequestBuilder.setSymbol(\"EUR/USD\");\n</code></pre> <pre><code>requestBuilder.setSide(\"B\");\nrequestBuilder.setSymbol(\"EUR/USD\");\n</code></pre> <p>For example, this code will close all buy positions for EUR/USD:</p> <p>See also getRequestFactory, createCloseAllPositionsRequestBuilder, closeAllPositionsRequestBuilder.</p> Closing all open positions <p>To close all open positions, you need to call the orders manager's closeAllPositions method and pass it the request builder and a listener function.</p> TYPESCRIPTJAVASCRIPT <pre><code>ordersManager.closeAllPositions(requestBuilder.build());\n</code></pre> <pre><code>ordersManager.closeAllPositions(requestBuilder.build());\n</code></pre> <p>The listener function is called when the closing action is completed. It takes two parameters:     - list of closed positions and a list of errors.  If there are no errors, the second parameter is empty.  If there are errors, the function onError is called for each error.</p> <p>See also IOrdersManager, IOpenPositionsManager, closeAllPositions.</p> Creating a listener function <p>A listener function is a class that implements the ICloseAllPositionsCallback interface.  It has two methods: onClosed and onError.  - The onClosed method is called when a position is successfully closed.  - The onError method is called when there is an error in closing a position.</p> TYPESCRIPTJAVASCRIPT <pre><code>class OpenPositionChangeListener implements FXConnectLite.IOpenPositionChangeListener {\nprivate openPositionsManager: FXConnectLite.IOpenPositionsManager;\n\nconstructor(openPositionsManager: FXConnectLite.IOpenPositionsManager) {\nthis.openPositionsManager = openPositionsManager;\n}\n\nonChange(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is changed.`)\n\nOpenPositionPrinter.print(this.openPositionsManager.getOpenPosition(openPositionInfo.getId()));\n}\n\nonAdd(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is added.`)\n\nOpenPositionPrinter.print(this.openPositionsManager.getOpenPosition(openPositionInfo.getId()));\n}\n\nonDelete(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is deleted.`)\n}\nonRefresh(): void {\nPrinter.print(`Open positions refreshed`)\nOpenPositionPrinter.printAll(this.openPositionsManager.getOpenPositionsSnapshot());\n}\n}\n</code></pre> <pre><code>class OpenPositionChangeListener {\nconstructor(openPositionsManager) {\nthis.openPositionsManager = openPositionsManager\n}\n\nonChange(openPositionInfo) {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is changed.`)\n\nOpenPositionPrinter.print(\nthis.openPositionsManager.getOpenPosition(openPositionInfo.getId())\n)\n}\n\nonAdd(openPositionInfo) {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is added.`)\n\nOpenPositionPrinter.print(\nthis.openPositionsManager.getOpenPosition(openPositionInfo.getId())\n)\n}\n\nonDelete(openPositionInfo) {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is deleted.`)\n}\nonRefresh() {\nPrinter.print(`Open positions refreshed`)\nOpenPositionPrinter.printAll(\nthis.openPositionsManager.getOpenPositionsSnapshot()\n)\n}\n}\n</code></pre> <p>You can use this class as follows:</p> TYPESCRIPTJAVASCRIPT <pre><code>let openPositionChangeListener = new OpenPositionChangeListener(openPositionsManager);\n</code></pre> <pre><code>let openPositionChangeListener = new OpenPositionChangeListener(openPositionsManager);\n</code></pre> <p>Download the sample TypeScript, JavaScript. </p>"},{"location":"trading/createamarketorder/","title":"Create A Market Order","text":"<p>How to create a market order</p> <p>This article will show you how to create a market order, which is a type of order that is executed immediately at the current market price. You can use market orders to open a new trade or to close an existing trade.</p> Steps <p>To create a market order, you need to follow these steps:</p> <ol> <li>Create an OpenOrderFactory object, which is a helper class that helps you set up the order parameters, such as the instrument, the direction, the amount, and the slippage. You can use the following code to create an OpenOrderFactory object:</li> </ol> TYPESCRIPTJAVASCRIPT <pre><code>let OpenOrderFactory = /** @class */ (function () {\nfunction OpenOrderFactory() {\n}\nOpenOrderFactory.create = function (manager, offersManager, accountId, offerId, amount) {\nreturn manager.getRequestFactory().createMarketOrderRequestBuilder()\n.setAccountId(accountId)\n.setAmount(amount)\n.setOfferId(offerId)\n.setBuySell('B')\n.setTimeInForce('IOC')\n.build();\n};\nreturn OpenOrderFactory;\n}());\n</code></pre> <pre><code>let OpenOrderFactory = /** @class */ (function () {\nfunction OpenOrderFactory() {\n}   OpenOrderFactory.create = function (manager, offersManager, accountId, offerId, amount) {\nreturn manager.getRequestFactory().createMarketOrderRequestBuilder()\n.setAccountId(accountId)\n.setAmount(amount)\n.setOfferId(offerId)\n.setBuySell('B')\n.setTimeInForce('IOC')\n.build();\n};\nreturn OpenOrderFactory;\n}());\n</code></pre> <p>For more information about the OpenOrderFactory class and its methods, see IOrdersManager, getRequestFactory, MarketOrderRequestBuilder.</p> <ol> <li>Use the OpenOrderFactory object to create a market order request, which is an object that contains all the information needed to place the order.</li> </ol> <p>You can use the following code to create a market order request:</p> TYPESCRIPTJAVASCRIPT <pre><code>let instrument = instrumentsManager.getInstrumentBySymbol(\"EUR/GBP\");\n//getting offer Id\nlet offerId = instrument.getOfferId();\nlet amount = 100; //any integer\n//create ordersManager\nlet manager = session.getOrdersManager();\n//create offersManager\nlet offersManager = session.getOffersManager();\n//create accountManager\nlet accountsManager = session.getAccountsManager();\n//get first account\nlet account = accountsManager.getAccountById(accountsManager.getAccountsInfo()[0].getId());// a user can have multiple accounts.\n//create using order factory\nlet request = OpenOrderFactory.create(manager, offersManager, account.getAccountId(), offerId, amount);\n//create market order\nmanager.createOpenMarketOrder(request);\n</code></pre> <pre><code>let instrument = instrumentsManager.getInstrumentBySymbol(\"EUR/GBP\");\n//getting offer Id\nlet offerId = instrument.getOfferId();\nlet amount = 100; //any integer\n//create ordersManager\nlet manager = session.getOrdersManager();\n//create offersManager\nlet offersManager = session.getOffersManager();\n//create accountManager\nlet accountsManager = session.getAccountsManager();\n//get first account\nlet account = accountsManager.getAccountById(accountsManager.getAccountsInfo()[0].getId());// a user can have multiple accounts.\n//create using order factory\nlet request = OpenOrderFactory.create(manager, offersManager, account.getAccountId(), offerId, amount);\n//create market order\nmanager.createOpenMarketOrder(request);\n</code></pre> <p>For more information about the createOpenMarketOrder method and its parameters, see createOpenMarketOrder.</p> <p>Examples</p> <p>You can download and run the sample TypeScript and JavaScript files to see how to create a market order in action.</p>"},{"location":"trading/createanentryorder/","title":"Create An Entry Order","text":"<p>How to create an entry order</p> <p>This article will show you how to create an entry order, which is a type of order that is executed when the market price reaches a specified level.  You can use entry orders to enter a trade at a favorable price or to set a stop-loss or take-profit for an existing trade.</p> Steps <p>Firstly, to create an entry order, you need to follow these steps:</p> <p>Create an EntryOrderFactory object, which is a helper class that helps you set up the order parameters, such as the instrument, the direction, the amount, the price,  and the expiration date. </p> <p>You can use the following code to create an EntryOrderFactory object:</p> TYPESCRIPTJAVASCRIPT <p>``` Typescript</p> <p>class EntryOrderFactory {     static create(manager, offersManager, accountId, offerId, amount) {</p> <pre><code>    let offer = offersManager.getOfferById(offerId);\n\n    return manager.getRequestFactory().createEntryOrderRequestBuilder()\n    .setAccountId(accountId)\n    .setAmount(amount)\n    .setOfferId(offerId)\n    .setBuySell('B')\n    .setTimeInForce('GTC')\n    .setCustomId('custom-id-open')\n    .setLimitRate(offer.getAsk() + offer.getAsk() / 90)\n    .setStopRate(offer.getAsk() - offer.getAsk() / 100)\n    .setRate(offer.getAsk() + offer.getAsk() / 100)\n    .setRateRange(10)\n    .enableTrailingStop(FXConnectLite.TrailingStopType.Fixed, 10)\n    .build();\n}\n</code></pre> <p>}     ```</p> <pre><code>let EntryOrderFactory = /** @class */ (function () {\nfunction EntryOrderFactory() {\n}\nEntryOrderFactory.create = function (manager, offersManager, accountId, offerId, amount) {\nvar offer = offersManager.getOfferById(offerId);\nreturn manager.getRequestFactory().createEntryOrderRequestBuilder()\n.setAccountId(accountId)\n.setAmount(amount)\n.setOfferId(offerId)\n.setBuySell('B')\n.setTimeInForce('GTC')\n.setCustomId('custom-id-open')                      .setLimitRate(offer.getAsk() + offer.getAsk() / 90)\n.setStopRate(offer.getAsk() - offer.getAsk() / 100)\n.setRate(offer.getAsk() + offer.getAsk() / 100)\n.setRateRange(10)\n.enableTrailingStop(FXConnectLite.TrailingStopType.Fixed, 10)\n.build();\n};\nreturn EntryOrderFactory;\n}());\n</code></pre> <p>For more information about the EntryOrderFactory class and its methods, see IOrdersManager, getRequestFactory,IOrdersRequestBuilderFactory, EntryOrderRequestBuilder.</p> <p>Secondly, use the EntryOrderFactory object to create an entry order request, which is an object that contains all the information needed to place the order. </p> <p>You can use the following code to create an entry order request:</p> TYPESCRIPTJAVASCRIPT <pre><code>let offerId = instrument.getOfferId();\nconst amount = 100; //any integer\n//create ordersManager\nlet manager = session.getOrdersManager();\n//create offersManager\nlet offersManager = session.getOffersManager();\n//create accountManager\nlet accountsManager = session.getAccountsManager();\n//get first account\nconst account = accountsManager.getAccountById(accountsManager.getAccountsInfo()[0].getId());\n//create request using our custom order factory\nlet request = EntryOrderFactory.create(manager, offersManager, account.getAccountId(), offerId, amount);\n//create entry order\nmanager.createEntryOrder(request);\n</code></pre> <pre><code>var offerId = instrument.getOfferId();\nvar amount = 100; //any integer\n//create ordersManager\nvar manager = session.getOrdersManager();\n//create offersManager\nvar offersManager = session.getOffersManager();\n//create accountManager\nvar accountsManager = session.getAccountsManager();\n//get first account\nvar account = accountsManager.getAccountById(accountsManager.getAccountsInfo()[0].getId());\n//create request using our custom order factory\nvar request = EntryOrderFactory.create(manager, offersManager, account.getAccountId(), offerId, amount);\n//create entry order\nmanager.createEntryOrder(request);\n</code></pre> <p>For more information about the createEntryOrder method and its parameters, see createEntryOrder.</p> <p>You can download and run the sample TypeScript and JavaScript files to see how to create an entry order in action.</p>"},{"location":"trading/createclosemarketorder/","title":"Create A Close Market Order","text":"<p>How to create a close market order Introduction</p> <p>This article will show you how to create a close market order, which is a type of order that is executed immediately at the current market price to close an existing trade. You can use close market orders to exit a trade and lock in your profit or loss.</p> Steps <p>To create a close market order, you need to follow these steps:</p> <ol> <li>Create a CloseOrderFactory object, which is a helper class that helps you set up the order parameters, such as the instrument, the direction, and the amount.</li> </ol> <p>You can use the following code to create a CloseOrderFactory object:</p> TYPESCRIPTJAVASCRIPT <pre><code>class CloseOrderFactory {\nstatic create(manager, tradeId, amount) {\nreturn manager.getRequestFactory().createCloseMarketOrderRequestBuilder()\n.setTradeId(tradeId)\n.setAmount(amount)\n.setRateRange(10)\n.setTimeInForce('IOC')\n.setCustomId('custom-id-close')\n.build();\n}\n}\n</code></pre> <pre><code>let CloseOrderFactory = /** @class */ (function () {\nfunction CloseOrderFactory() {\n}\nCloseOrderFactory.create = function (manager, tradeId, amount) {\nreturn manager.getRequestFactory().createCloseMarketOrderRequestBuilder() // create builder and set properties\n.setTradeId(tradeId)\n.setAmount(amount)\n.setRateRange(10)\n.setTimeInForce('IOC')\n.setCustomId('custom-id-close')\n.build();\n};\nreturn CloseOrderFactory;\n}()); </code></pre> <p>For more information about the CloseOrderFactory class and its methods, see getRequestFactory, createCloseMarketOrderRequestBuilder, CloseMarketOrderRequestBuilder.</p> Use the CloseOrderFactory object to create a close market order request <p>, which is an object that contains all the information needed to place the order. You can use the following code to create a close market order request:</p> TYPESCRIPTJAVASCRIPT <pre><code>class PlaceCloseOrderAction {\nprivate session: FXConnectLite.IFXConnectLiteSession;\n\nconstructor(session: FXConnectLite.IFXConnectLiteSession) {\nthis.session = session;\n}\n\nexecute(tradeId) {\nPrinter.print(`Place close market order...`)\nlet ordersManager = this.session.getOrdersManager();\nlet openPositionManager = this.session.getOpenPositionsManager();\nlet openPosition = openPositionManager.getOpenPosition(tradeId);\nlet request = CloseOrderFactory.create(ordersManager, tradeId, openPosition.getAmount());\nordersManager.createCloseMarketOrder(request);\n}\n}\n</code></pre> <pre><code>let PlaceCloseOrderAction = /** @class */ (function () {\nfunction PlaceCloseOrderAction(session) {\nthis.session = session;\n}\nPlaceCloseOrderAction.prototype.execute = function (tradeId) {\nconsole.log(\"Place close market order...\");\nvar ordersManager = this.session.getOrdersManager();\nvar openPositionManager = this.session.getOpenPositionsManager();\nvar openPosition = openPositionManager.getOpenPosition(tradeId);\nvar request = CloseOrderFactory.create(ordersManager, tradeId, openPosition.getAmount());\nordersManager.createCloseMarketOrder(request);\n};\nreturn PlaceCloseOrderAction;\n}());\n</code></pre> <p>For more information about the createCloseMarketOrder method and its parameters, see IOrdersManager,IOpenPositionsManager, createCloseMarketOrder.</p> <p>Send the close market order request to the server using the send method of the IOrdersManager interface. You can use the following code to send the close market order request:</p> TYPESCRIPTJAVASCRIPT <pre><code>\n</code></pre> <pre><code>\n</code></pre> <p>For more information about the send method and its callbacks, see IOrdersManager.</p> Listen for changes in your open positions using the OpenPositionsChangeListener interface. <p></p> <p>You can use the following code to register a listener that will be notified when an open position is changed:</p> TYPESCRIPTJAVASCRIPT <pre><code>let openPositionChangeListener = new OpenPositionChangeListener(openPositionManager, new PlaceCloseOrderAction(session));\n</code></pre> <pre><code>let openPositionChangeListener = new OpenPositionChangeListener(openPositionManager, new PlaceCloseOrderAction(session));\n</code></pre> <p>For more information about the OpenPositionsChangeListener interface and its methods, see IOrdersManager,IOpenPositionsManager, OpenPositionInfo, OpenPosition.</p> <p>Below you can see the events that are monitored by the listener:</p> TYPESCRIPTJAVASCRIPT <pre><code>class OpenPositionChangeListener implements FXConnectLite.IOpenPositionChangeListener {\nprivate openPositionsManager: FXConnectLite.IOpenPositionsManager;\nprivate placeCloseOrderAction: PlaceCloseOrderAction;\n\nconstructor(openPositionsManager: FXConnectLite.IOpenPositionsManager, placeCloseOrderAction: PlaceCloseOrderAction) {\nthis.openPositionsManager = openPositionsManager;\nthis.placeCloseOrderAction = placeCloseOrderAction;\n}\n\nonChange(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\n//do nothing\n}\n\nonAdd(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\nlet me = this;\nlet openPosition = this.openPositionsManager.getOpenPosition(openPositionInfo.getId());\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} added.`)\nPrinter.print(OpenPositionFormatter.TITLE);\nPrinter.print(OpenPositionFormatter.format(openPosition));\nsetTimeout(function () { me.placeCloseOrderAction.execute(openPositionInfo.getId()) }, 1000);\n}\n\nonDelete(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\nlet openPosition = this.openPositionsManager.getOpenPosition(openPositionInfo.getId());\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} deleted.`)\nPrinter.print(OpenPositionFormatter.TITLE);\nPrinter.print(OpenPositionFormatter.format(openPosition));\n}\nonRefresh(): void {\n//do nothing\n}\n}\n</code></pre> <pre><code>let OpenPositionChangeListener = /** @class */ (function () {\nfunction OpenPositionChangeListener(openPositionsManager, placeCloseOrderAction) {\nthis.openPositionsManager = openPositionsManager;\nthis.placeCloseOrderAction = placeCloseOrderAction;\n}\nOpenPositionChangeListener.prototype.onChange = function (openPositionInfo) {\n//do nothing\n};\nOpenPositionChangeListener.prototype.onAdd = function (openPositionInfo) {\nvar me = this;\nvar openPosition = this.openPositionsManager.getOpenPosition(openPositionInfo.getId());\nconsole.log(\"OpenPosition \".concat(openPositionInfo.getId(), \" added.\"));\nconsole.log(OpenPositionFormatter.TITLE);\nconsole.log(OpenPositionFormatter.format(openPosition));\nsetTimeout(function () { me.placeCloseOrderAction.execute(openPositionInfo.getId()); }, 1000); //wait execution\n};\nOpenPositionChangeListener.prototype.onDelete = function (openPositionInfo) {\nvar openPosition = this.openPositionsManager.getOpenPosition(openPositionInfo.getId());\nconsole.log(\"OpenPosition \".concat(openPositionInfo.getId(), \" deleted.\"));\nconsole.log(OpenPositionFormatter.TITLE);\nconsole.log(OpenPositionFormatter.format(openPosition)); //log that position was deleted\n};\nOpenPositionChangeListener.prototype.onRefresh = function () {\n//do nothing\n};\nreturn OpenPositionChangeListener;\n}());\n</code></pre> <p>See also IOrdersManager,IOpenPositionsManager, OpenPositionInfo, OpenPosition</p> Use the formatter class to display the open position properties in a readable text format. <p></p> <p>You can use the following code to create and use a formatter object:</p> TYPESCRIPTJAVASCRIPT <pre><code>class OpenPositionFormatter {\nstatic readonly TITLE = `# | TradeID | AccountId | UsedMargin | Amount | BuySell | OpenRate | CloseRate | StopRate | LimitRate`;\n\npublic static formatByIndex(index: number, openPosition: FXConnectLite.OpenPosition): string {\nlet formatString;\nformatString = `${index} | ${openPosition.getTradeID()} | ${openPosition.getAccountId()} | ${openPosition.getUsedMargin()} | ${openPosition.getAmount()} | ${openPosition.getBuySell()} | ${openPosition.getOpenRate()} | ${openPosition.getCloseRate()} | ${openPosition.getStopRate()} | ${openPosition.getLimitRate()} |`;\nreturn formatString;\n}\n\npublic static format(openPosition: FXConnectLite.OpenPosition): string {\nlet formatString;\nformatString = `${openPosition.getTradeID()} | ${openPosition.getAccountId()} | ${openPosition.getUsedMargin()} | ${openPosition.getAmount()} | ${openPosition.getBuySell()} | ${openPosition.getOpenRate()} | ${openPosition.getCloseRate()} | ${openPosition.getStopRate()} | ${openPosition.getLimitRate()} |`;\nreturn formatString;\n}\n}\n</code></pre> <pre><code>let OpenPositionFormatter = /** @class */ (function () {\nfunction OpenPositionFormatter() {\n}\nOpenPositionFormatter.formatByIndex = function (index, openPosition) {\nvar formatString;\nformatString = \"\".concat(index, \" | \").concat(openPosition.getTradeID(), \" | \").concat(openPosition.getAccountId(), \" | \").concat(openPosition.getUsedMargin(), \" | \").concat(openPosition.getAmount(), \" | \").concat(openPosition.getBuySell(), \" | \").concat(openPosition.getOpenRate(), \" | \").concat(openPosition.getCloseRate(), \" | \").concat(openPosition.getStopRate(), \" | \").concat(openPosition.getLimitRate(), \" |\");\nreturn formatString;\n};\nOpenPositionFormatter.format = function (openPosition) {\nvar formatString;\nformatString = \"\".concat(openPosition.getTradeID(), \" | \").concat(openPosition.getAccountId(), \" | \").concat(openPosition.getUsedMargin(), \" | \").concat(openPosition.getAmount(), \" | \").concat(openPosition.getBuySell(), \" | \").concat(openPosition.getOpenRate(), \" | \").concat(openPosition.getCloseRate(), \" | \").concat(openPosition.getStopRate(), \" | \").concat(openPosition.getLimitRate(), \" |\");\nreturn formatString;\n};\nOpenPositionFormatter.TITLE = \"# | TradeID | AccountId | UsedMargin | Amount | BuySell | OpenRate | CloseRate | StopRate | LimitRate\";\nreturn OpenPositionFormatter;\n}());\n</code></pre> <p>For more information about the formatter class and its methods, see OpenPosition.</p> <p>Examples</p> <p>You can download and run the sample TypeScript and JavaScript files to see how to create a close market order in action.</p>"},{"location":"trading/getallaccounts/","title":"Get All Accounts","text":"<p>How to get a list of all accounts Overview</p> <p>This article will show you how to use the API to get a list of accounts. You will learn how to: - Listen for account changes - Subscribe to account changes - Get and print accounts - Print account properties</p> <p>You will need some basic knowledge of TypeScript and JavaScript to follow this tutorial. You can also download the sample code at the end of the article.</p> <p>Step 1: Listen for account changes</p> <p>The first step is to create an account change listener. This is a function that will be called whenever an account is added, removed, or updated. You can use the AccountInfo interface to access the account details.</p> <p>Below you can see some example code to create an account change listener:</p> TYPESCRIPTJAVASCRIPT <pre><code>class AccountChangeListener implements FXConnectLite.IAccountChangeListener {\nonChange(accountInfo: FXConnectLite.AccountInfo): void {\n}\nonAdd(accountInfo: FXConnectLite.AccountInfo): void {\n}\nonRefresh(): void {\n}\nonDelete(accountInfo: FXConnectLite.AccountInfo): void {\n}\n}\n</code></pre> <pre><code>let AccountChangeListener = /** @class */ (function () {\nfunction AccountChangeListener() {\n}\nAccountChangeListener.prototype.onChange = function (accountInfo) {\n//some code on change\n};\nAccountChangeListener.prototype.onAdd = function (accountInfo) {\n//some code on add\n};\nAccountChangeListener.prototype.onRefresh = function () {\n//some code on refresh\n};\nAccountChangeListener.prototype.onDelete = function (accountInfo) {\n//some code on delete\n};\nreturn AccountChangeListener;\n}());\n</code></pre> <p>For more information about the AccountInfo interface, see the API reference.</p> <p>Step 2: Subscribe to account changes</p> <p>The next step is to get an instance of the account manager and subscribe to account changes. The account manager is an object that provides methods for managing accounts. You can use the IAccountsManager interface to access its methods.</p> <p>To get an instance of the account manager and subscribe to account changes, you need to write some TypeScript or JavaScript code like this:</p> TYPESCRIPTJAVASCRIPT <pre><code>let accountChangeListener = new AccountChangeListener(); // create account change listener\nsession.getAccountsManager().subscribeAccountChange(accountChangeListener); // subscribe\n</code></pre> <pre><code>let accountChangeListener = new AccountChangeListener(); // create account change listener\nsession.getAccountsManager().subscribeAccountChange(accountChangeListener); // subscribe\n</code></pre> <p>For more information about the IAccountsManager interface, see the API reference.</p> <p>Step 3: Get and print accounts</p> <p>The third step is to create a function that will get and print the list of accounts. You can use the getAccountsSnapshot method of the account manager to get a snapshot of the current accounts. This method returns a promise that resolves with an array of AccountInfo objects.</p> <p>To create a function that will get and print the list of accounts, you need to write some TypeScript or JavaScript code like this:</p> TYPESCRIPTJAVASCRIPT <pre><code>private getAndPrintAccounts = async (session, application) =&gt; {\nreturn new Promise&lt;void&gt;((resolve, reject) =&gt; {\napplication.resolveGetAccounts = resolve;\nlet accountsManager = session.getAccountsManager();\napplication.printAccountsSnapshot(accountsManager);\n})\n}\n</code></pre> <pre><code>this.getAndPrintAccounts = function (session, application) {\nreturn new Promise((resolve, reject) =&gt; {\napplication.resolveGetAccounts = resolve;\nvar accountsManager = session.getAccountsManager(); // get account manager\naccountsManager.getAccountsSnapshot(this.getAccountsSnapshotCallback); // get account snapshot\n});\n};\n</code></pre> <p>For more information about the getAccountsSnapshot method, see the API reference.</p> <p>And the code of callback for providing information about all accounts:</p> <p>The code of callback</p> TYPESCRIPTJAVASCRIPT <pre><code>private getAccountsSnapshotCallback = new class implements FXConnectLite.IGetAccountsSnapshotCallback {\nonAccountsReceived(accounts: FXConnectLite.Account[]): void {\naccounts.forEach(account =&gt; {\nPrinter.print(`Current snapshot:`);\nApplication.printAccount(account);\n});\napplication.resolveGetAccounts();\n}\n}();\n</code></pre> <pre><code>this.getAccountsSnapshotCallback = new /** @class */ (function () {\nfunction snapShotCallback() {\n}\nsnapShotCallback.prototype.onAccountsReceived = function (accounts) {\naccounts.forEach(function (account) {\nconsole.log(\"Current snapshot:\");\nApplication.printAccount(account); // for each account show info\n});\napplication.resolveGetAccounts();\n};\nreturn snapShotCallback;\n}())();\n</code></pre> <p>See also onAccountReceived</p> <p>Step 4: Print account properties</p> <p>The final step is to create a method that will print the properties of each account. You can use the Account interface to access the properties of an account, such as its name, balance, and status.</p> <p>To create a method that will print the properties of each account, you need to write some TypeScript or JavaScript code like this:</p> TYPESCRIPTJAVASCRIPT <pre><code>public static formatDate(date: any): string {\nreturn date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n}\n\npublic static printAccount(account: FXConnectLite.Account): void {\nPrinter.print(``)\nPrinter.print(`AccountId = ${account.getAccountId()}`)\nPrinter.print(`AccountName = ${account.getAccountName()}`)\nPrinter.print(`AccountKind = ${account.getAccountKind()}`)\nPrinter.print(`Base currency = ${account.getBaseCurrency()}`)\nPrinter.print(`Base currency precision = ${account.getBaseCurrencyPrecision()}`)\nPrinter.print(`ATPId = ${account.getATPId()}`)\nPrinter.print(`Balance = ${account.getBalance()}`)\nPrinter.print(`BaseUnitSize = ${account.getBaseUnitSize()}`)\nPrinter.print(`DayPL = ${account.getDayPL()}`)\nPrinter.print(`Equity = ${account.getEquity()}`)\nPrinter.print(`GrossPL = ${account.getGrossPL()}`)\nPrinter.print(`LastMarginCallDate = ${Application.formatDate(account.getLastMarginCallDate())}`)\nPrinter.print(`LeverageProfileId = ${account.getLeverageProfileId()}`)\nPrinter.print(`M2MEquity = ${account.getM2MEquity()}`)\nPrinter.print(`MaintenanceFlag = ${account.getMaintenanceFlag()}`)\nPrinter.print(`MaintenanceType = ${account.getMaintenanceType()}`)\nPrinter.print(`ManagerAccountId = ${account.getManagerAccountId()}`)\nPrinter.print(`MarginCallFlag = ${account.getMarginCallFlag()}`)\nPrinter.print(`NonTradeEquity = ${account.getNonTradeEquity()}`)\nPrinter.print(`OrderAmountLimit = ${account.getOrderAmountLimit()}`)\nPrinter.print(`UsableMaintenanceMargin = ${account.getUsableMaintenanceMargin()}`)\nPrinter.print(`UsableMaintenanceMarginPercentage = ${account.getUsableMaintenanceMarginPercentage()}`)\nPrinter.print(`UsableMargin = ${account.getUsableMargin()}`)\nPrinter.print(`UsableMarginPercentage = ${account.getUsableMarginPercentage()}`)\nPrinter.print(`UsedMaintenanceMargin = ${account.getUsedMaintenanceMargin()}`)\nPrinter.print(`UsedMargin = ${account.getUsedMargin()}`)\nPrinter.print(``)\n}\n</code></pre> <pre><code>Application.formatDate = function (date) {\nreturn date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n};\nApplication.printAccount = function (account) {\nconsole.log(\"\");\nconsole.log(\"AccountId = \".concat(account.getAccountId()));\nconsole.log(\"AccountName = \".concat(account.getAccountName()));\nconsole.log(\"AccountKind = \".concat(account.getAccountKind()));\nconsole.log(\"Base currency = \".concat(account.getBaseCurrency()));\nconsole.log(\"Base currency precision = \".concat(account.getBaseCurrencyPrecision()));\nconsole.log(\"ATPId = \".concat(account.getATPId()));\nconsole.log(\"Balance = \".concat(account.getBalance()));\nconsole.log(\"BaseUnitSize = \".concat(account.getBaseUnitSize()));\nconsole.log(\"DayPL = \".concat(account.getDayPL()));\nconsole.log(\"Equity = \".concat(account.getEquity()));\nconsole.log(\"GrossPL = \".concat(account.getGrossPL()));\nconsole.log(\"LastMarginCallDate = \".concat(Application.formatDate(account.getLastMarginCallDate())));\nconsole.log(\"LeverageProfileId = \".concat(account.getLeverageProfileId()));\nconsole.log(\"M2MEquity = \".concat(account.getM2MEquity()));\nconsole.log(\"MaintenanceFlag = \".concat(account.getMaintenanceFlag()));\nconsole.log(\"MaintenanceType = \".concat(account.getMaintenanceType()));\nconsole.log(\"ManagerAccountId = \".concat(account.getManagerAccountId()));\nconsole.log(\"MarginCallFlag = \".concat(account.getMarginCallFlag()));\nconsole.log(\"NonTradeEquity = \".concat(account.getNonTradeEquity()));\nconsole.log(\"OrderAmountLimit = \".concat(account.getOrderAmountLimit()));\nconsole.log(\"UsableMaintenanceMargin = \".concat(account.getUsableMaintenanceMargin()));\nconsole.log(\"UsableMaintenanceMarginPercentage = \".concat(account.getUsableMaintenanceMarginPercentage()));\nconsole.log(\"UsableMargin = \".concat(account.getUsableMargin()));\nconsole.log(\"UsableMarginPercentage = \".concat(account.getUsableMarginPercentage()));\nconsole.log(\"UsedMaintenanceMargin = \".concat(account.getUsedMaintenanceMargin()));\nconsole.log(\"UsedMargin = \".concat(account.getUsedMargin()));\nconsole.log(\"\");\n};\n</code></pre> <p>For more information about the Account interface, see the API reference.</p> <p>You can download the sample TypeScript and JavaScript code from here. </p>"},{"location":"trading/getallorders/","title":"Get All Orders","text":"<p>How to get a list of all orders Overview</p> <p>This article explains how to get a list of all orders using the order manager. Orders are instructions to buy or sell an instrument at a specified price, volume, and time. You can get a list of all orders, or filter them by instrument, status, or type.</p> <p>Before you can get a list of all orders, you need to: - Create an order manager. See How to create order manager for more details. - Subscribe to the state change event. See the next section for an example. - Create an order printer. See the last section for an example. - Subscribing to the state change event</p> <p>The state change event is an event that occurs when the order manager's state changes. The state can change due to new orders, modified orders, cancelled orders, or executed orders. To subscribe to the state change event, you need to create a listener function that implements the IStateChangeListener interface. The listener function has one method: onStateChanged. The method is called when the state change event occurs.</p> <p>Below you can see some example code for to subscribe to the state change event:</p> TYPESCRIPTJAVASCRIPT <pre><code>session.getOrdersManager().subscribeStateChange(completeHandler); //get orders manager\nsession.getOrdersManager().refresh();\n</code></pre> <pre><code>session.getOrdersManager().subscribeStateChange(completeHandler); //get orders manager\nsession.getOrdersManager().refresh();\n</code></pre> <p>To use the listener function, you need to subscribe it to the order manager using the subscribeStateChange method. You also need to call the refresh method to initialize the order manager's state.</p> <p>See also subscribeStateChange, refresh</p> Getting a list of all orders <p>To get a list of all orders, you can use the order manager's getOrdersSnapshot method. This method returns a list of all orders that are currently in the order manager's state.  You can use the order printer to print the details of each order.</p> <p>Below you can see some example code for getOrdersSnapshot :</p> TYPESCRIPTJAVASCRIPT <pre><code>let ordersManager = session.getOrdersManager();\nOrderPrinter.printAll(ordersManager.getOrdersSnapshot()); // get orders snapshot\n</code></pre> <pre><code>let ordersManager = session.getOrdersManager();\nOrderPrinter.printAll(ordersManager.getOrdersSnapshot()); // get orders snapshot\n</code></pre> <p>See also IOrdersManager, getOrdersSnapshot</p> Creating an order printer <p>An order printer is a function that takes an order as an argument and prints its base properties.</p> <p>The base properties are: - id: The unique identifier of the order. - symbol: The instrument symbol of the order. - side: The direction (buy or sell) of the order. - type: The type (market, limit, stop, etc.) of the order. - volume: The amount of units of the instrument to buy or sell. - price: The price at which the order is executed. - status: The status (pending, filled, cancelled, etc.) of the order.</p> <p>Below you can see some example code for the order printer : </p> TYPESCRIPTJAVASCRIPT <pre><code>class OrderPrinter {\npublic static print(order: FXConnectLite.Order): void {\nPrinter.print(`OrderId = ${order.getOrderId()} AccountId = ${order.getAccountId()} OfferId = ${order.getOfferId()} Amount = ${order.getAmount()} Rate = ${order.getRate()} Type = ${order.getType()} Status = ${order.getStatus()} BuySell = ${order.getBuySell()}`)\n}\n\npublic static printAll(orders: FXConnectLite.Order[]): void {\nPrinter.print(`Current orders snapshot:`);\nPrinter.print(`Number of orders is ${orders.length}`);\norders.forEach(order =&gt; {\nOrderPrinter.print(order);\n});\n}\n}\n</code></pre> <pre><code>var OrderPrinter = /** @class */ (function () {\nfunction OrderPrinter() {\n}\nOrderPrinter.print = function (order) {\nconsole.log(\"OrderId = \".concat(order.getOrderId(), \" AccountId = \").concat(order.getAccountId(), \" OfferId = \").concat(order.getOfferId(), \" Amount = \").concat(order.getAmount(), \" Rate = \").concat(order.getRate(), \" Type = \").concat(order.getType(), \" Status = \").concat(order.getStatus(), \" BuySell = \").concat(order.getBuySell()));\n};\nOrderPrinter.printAll = function (orders) {\nconsole.log(\"Current orders snapshot:\");\nconsole.log(\"Number of orders is \".concat(orders.length));\norders.forEach(function (order) {\nOrderPrinter.print(order); // show account property\n});\n};\nreturn OrderPrinter;\n}());\n</code></pre> <p>See also Order</p> <p>Download the sample TypeScript, JavaScript. </p>"},{"location":"trading/getavailableinstruments/","title":"Get Available Instruments","text":"<p>How to get available instruments Overview</p> <p>This article will teach you how to use the API to get available instruments. Before you can get available instruments, you need to: - Refresh the session object - Create an instrument manager object - Subscribe to the instrument manager state change event - Refresh the instrument manager object - Get the list of instrument descriptors</p> <p>Step 1: Refresh the session object</p> <p>The first step is to refresh the session object. This is an object that represents your connection to the API. You can use the refresh method of the session object to update its state and data.</p> <p>To refresh the session object, you need to write some TypeScript or JavaScript code like this:</p> <p> <p>For more information about the session object, see the API reference.</p> <p>Step 2: Create an instrument manager object</p> <p>The next step is to create an instrument manager object. This is an object that provides methods for managing instruments. You can use the IInstrumentsManager interface to access its methods and properties.</p> <p>To create an instrument manager object, you need to write some TypeScript or JavaScript code like this:</p> <p> <p>For more information about the IInstrumentsManager interface, see the API reference.</p> <p>Step 3: Subscribe to the instrument manager state change event</p> <p>The third step is to subscribe to the instrument manager state change event. This event is triggered when the instrument manager's state changes, such as when it is loading, loaded, or not loaded. You can use the IDataManagerStateChangeListener interface to define a listener function for this event.</p> <p>To subscribe to the instrument manager state change event, you need to write some TypeScript or JavaScript code like this:</p> <p> <p>For more information about the IDataManagerStateChangeListener interface, see the API reference.</p> <p>Step 4: Refresh the instrument manager object</p> <p>The fourth step is to refresh the instrument manager object. This is a method that requests the latest data from the API and updates the instrument manager's state and data. You can use the refresh method of the instrument manager object to perform this action.</p> <p>To refresh the instrument manager object, you need to write some TypeScript or JavaScript code like this:</p> <p> <p>For more information about the refresh method, see the API reference.</p> <p>Step 5: Get the list of instrument descriptors</p> <p>The final step is to get the list of instrument descriptors. These are objects that contain short descriptions of available instruments, such as their offer ID, symbol, subscription status, and price stream ID. You can use the getAllInstrumentDescriptors method of the instrument manager object to get a list of instrument descriptors. This method returns an array of InstrumentDescriptor objects.</p> <p>To get the list of instrument descriptors, you need to write some TypeScript or JavaScript code like this:</p> <p> <p>For more information about the InstrumentDescriptor interface and its methods, see the API reference.</p> <p>Conclusion</p> <p>You have learned how to use the API to get available instruments. You have refreshed the session object, created an instrument manager object, subscribed to the instrument manager state change event, refreshed the instrument manager object, and got the list of instrument descriptors. You can now use this knowledge to build your own applications that work with available instruments.</p> <p>You can download the sample TypeScript and JavaScript code from here. Happy coding! </p>"},{"location":"trading/getclosedpositions/","title":"Get Closed Positions","text":"<p>How to get a list of closed positions Overview</p> <p>This article explains how to get a list of closed positions using the closed positions manager.  Closed positions are positions that have been exited from the market and have a final profit or loss.  You can get a list of all closed positions, or filter them by instrument or time.</p> <p>Before you can get a list of closed positions, you need to: - Create a closed positions manager.  - Create a closed position listener.  - Create a position change listener.  - Create a printer function.</p> Creating a closed position manager and listener <p>A closed position listener is a class that implements the IClosedPositionChangeListener interface. It has one method: onClosedPositionChange. The method is called when a new position is closed or an existing position is updated.</p> <p>Below you can see some example code for creating the Closed positions listener:</p> TYPESCRIPTJAVASCRIPT <pre><code>let closedPositionsManager = session.getClosedPositionsManager(); // get closed position manager\nlet closedPositionChangeListener = new ClosedPositionChangeListener(closedPositionsManager); // create listener\nclosedPositionsManager.subscribeClosedPositionChange(closedPositionChangeListener); // subscribe\n</code></pre> <pre><code>var closedPositionsManager = session.getClosedPositionsManager(); // get closed position manager\nvar closedPositionChangeListener = new ClosedPositionChangeListener(closedPositionsManager); // create listener\nclosedPositionsManager.subscribeClosedPositionChange(closedPositionChangeListener); // subscribe\n</code></pre> <p>To use the closed position listener, you need to subscribe it to the closed positions manager using the subscribeClosedPositionChange method.</p> <p>See also IClosedPositionsManager, subscribeClosedPositionChange</p> Creating a position change listener <p>A position change listener is a class that implements the IPositionChangeListener interface. It has one method: onPositionChange. The method is called when a position is opened, closed, or modified.</p> <p>Below you can see some example code for creating the position change listener</p> TYPESCRIPTJAVASCRIPT <pre><code>class ClosedPositionChangeListener implements FXConnectLite.IClosedPositionChangeListener {\nprivate closedPositionsManager: FXConnectLite.IClosedPositionsManager;\n\nconstructor(closedPositionsManager: FXConnectLite.IClosedPositionsManager) {\nthis.closedPositionsManager = closedPositionsManager;\n}\n\nonChange(closedPositionInfo: FXConnectLite.ClosedPositionInfo): void {\nPrinter.print(`Closed position ${closedPositionInfo.getId()} changed`)\n\nClosedPositionPrinter.print(this.closedPositionsManager.getClosedPosition(closedPositionInfo.getId()));\n}\n\nonAdd(closedPositionInfo: FXConnectLite.ClosedPositionInfo): void {\nPrinter.print(`Closed position ${closedPositionInfo.getId()} added`)\n\nClosedPositionPrinter.print(this.closedPositionsManager.getClosedPosition(closedPositionInfo.getId()));\n}\n\nonRefresh(): void {\nPrinter.print(`Closed positions refreshed`)\nClosedPositionPrinter.printAll(this.closedPositionsManager.getClosedPositionsSnapshot());\n}\n}\n</code></pre> <pre><code>let ClosedPositionChangeListener = /** @class */ (function () {\nfunction ClosedPositionChangeListener(closedPositionsManager) {\nthis.closedPositionsManager = closedPositionsManager;\n}\nClosedPositionChangeListener.prototype.onChange = function (closedPositionInfo) {\nconsole.log(\"Closed position \".concat(closedPositionInfo.getId(), \" changed\"));\nClosedPositionPrinter.print(this.closedPositionsManager.getClosedPosition(closedPositionInfo.getId()));  // show info for changed position\n};\nClosedPositionChangeListener.prototype.onAdd = function (closedPositionInfo) {\nconsole.log(\"Closed position \".concat(closedPositionInfo.getId(), \" added\"));\nClosedPositionPrinter.print(this.closedPositionsManager.getClosedPosition(closedPositionInfo.getId())); // show info for added position\n};\nClosedPositionChangeListener.prototype.onRefresh = function () {\nconsole.log(\"Closed positions refreshed\");\nClosedPositionPrinter.printAll(this.closedPositionsManager.getClosedPositionsSnapshot()); //show info for refreshed position\n};\nreturn ClosedPositionChangeListener;\n}());\n</code></pre> <p>To use the position change listener, you need to register it to the closed positions manager using the registerPositionChangeListener method.</p> <p>See also IClosedPositionsManager, registerPositionChangeListener</p> Getting a list of closed positions <p>To get a list of closed positions, you can use one of these methods: - getClosedPosition: This method takes an instrument symbol as an argument and returns the last closed position for that instrument. - getClosedPositionsSnapshot: This method returns a list of all closed positions.</p> <p>You can use the printer function to print the details of each closed position.</p> <p>See also IClosedPositionsManager, getClosedPosition, getClosedPositionsSnapshot</p> Creating a printer function <p>A printer function is a function that takes a closed position as an argument and prints its properties and logs.</p> TYPESCRIPTJAVASCRIPT <pre><code>class ClosedPositionPrinter {\n\npublic static print(closedPosition: FXConnectLite.ClosedPosition): void {\nPrinter.print(``)\nPrinter.print(`TradeID = ${closedPosition.getTradeID()}`)\nPrinter.print(`AccountId = ${closedPosition.getAccountId()}`)\nPrinter.print(`AccountName = ${closedPosition.getAccountName()}`)\nPrinter.print(`AccountKind = ${closedPosition.getAccountKind()}`)\nPrinter.print(`OfferId = ${closedPosition.getOfferId()}`)\nPrinter.print(`Amount = ${closedPosition.getAmount()}`)\nPrinter.print(`BuySell = ${closedPosition.getBuySell()}`)\n\nPrinter.print(`OpenRate = ${closedPosition.getOpenRate()}`)\nPrinter.print(`OpenTime = ${closedPosition.getOpenTime()}`)\nPrinter.print(`OpenQuoteId = ${closedPosition.getOpenQuoteId()}`)\nPrinter.print(`OpenOrderId = ${closedPosition.getOpenOrderId()}`)\nPrinter.print(`OpenOrderReqId = ${closedPosition.getOpenOrderReqId()}`)\nPrinter.print(`OpenOrderRequestTXT = ${closedPosition.getOpenOrderRequestTXT()}`)\n\nPrinter.print(`CloseRate = ${closedPosition.getCloseRate()}`)\nPrinter.print(`CloseTime = ${closedPosition.getCloseTime()}`)\nPrinter.print(`CloseQuoteId = ${closedPosition.getCloseQuoteId()}`)\nPrinter.print(`CloseOrderId = ${closedPosition.getCloseOrderId()}`)\nPrinter.print(`CloseOrderReqId = ${closedPosition.getCloseOrderReqId()}`)\nPrinter.print(`CloseOrderRequestTXT = ${closedPosition.getCloseOrderRequestTXT()}`)\n\nPrinter.print(`Commission = ${closedPosition.getCommission()}`)\nPrinter.print(`RolloverInterest = ${closedPosition.getRolloverInterest()}`)\nPrinter.print(`TradeIdOrigin = ${closedPosition.getTradeIdOrigin()}`)\nPrinter.print(`ValueDate = ${closedPosition.getValueDate()}`)\nPrinter.print(`CloseOrderParties = ${closedPosition.getCloseOrderParties()}`)\nPrinter.print(`PL = ${closedPosition.getPL()}`)\nPrinter.print(`NetPL = ${closedPosition.getNetPL()}`)\nPrinter.print(`PLPips = ${closedPosition.getPLPips()}`)\nPrinter.print(`GrossPL = ${closedPosition.getGrossPL()}`)\nPrinter.print(``)\n}\n\npublic static printAll(closedPositions: FXConnectLite.ClosedPosition[]): void {\nPrinter.print(`Current closed positions snapshot:`);\nPrinter.print(`Number of closed positions: ${closedPositions.length}`);\nclosedPositions.forEach(closedPosition =&gt; {\nClosedPositionPrinter.print(closedPosition);\n});\n}\n}\n</code></pre> <pre><code>let ClosedPositionPrinter = /** @class */ (function () {\nfunction ClosedPositionPrinter() {\n}\nClosedPositionPrinter.print = function (closedPosition) {\nconsole.log(\"\");\nconsole.log(\"TradeID = \".concat(closedPosition.getTradeID()));\nconsole.log(\"AccountId = \".concat(closedPosition.getAccountId()));\nconsole.log(\"AccountName = \".concat(closedPosition.getAccountName()));\nconsole.log(\"AccountKind = \".concat(closedPosition.getAccountKind()));\nconsole.log(\"OfferId = \".concat(closedPosition.getOfferId()));\nconsole.log(\"Amount = \".concat(closedPosition.getAmount()));\nconsole.log(\"BuySell = \".concat(closedPosition.getBuySell()));\nconsole.log(\"OpenRate = \".concat(closedPosition.getOpenRate()));\nconsole.log(\"OpenTime = \".concat(closedPosition.getOpenTime()));\nconsole.log(\"OpenQuoteId = \".concat(closedPosition.getOpenQuoteId()));\nconsole.log(\"OpenOrderId = \".concat(closedPosition.getOpenOrderId()));\nconsole.log(\"OpenOrderReqId = \".concat(closedPosition.getOpenOrderReqId()));\nconsole.log(\"OpenOrderRequestTXT = \".concat(closedPosition.getOpenOrderRequestTXT()));\nconsole.log(\"CloseRate = \".concat(closedPosition.getCloseRate()));\nconsole.log(\"CloseTime = \".concat(closedPosition.getCloseTime()));\nconsole.log(\"CloseQuoteId = \".concat(closedPosition.getCloseQuoteId()));\nconsole.log(\"CloseOrderId = \".concat(closedPosition.getCloseOrderId()));\nconsole.log(\"CloseOrderReqId = \".concat(closedPosition.getCloseOrderReqId()));\nconsole.log(\"CloseOrderRequestTXT = \".concat(closedPosition.getCloseOrderRequestTXT()));\nconsole.log(\"Commission = \".concat(closedPosition.getCommission()));\nconsole.log(\"RolloverInterest = \".concat(closedPosition.getRolloverInterest()));\nconsole.log(\"TradeIdOrigin = \".concat(closedPosition.getTradeIdOrigin()));\nconsole.log(\"ValueDate = \".concat(closedPosition.getValueDate()));\nconsole.log(\"CloseOrderParties = \".concat(closedPosition.getCloseOrderParties()));\nconsole.log(\"PL = \".concat(closedPosition.getPL()));\nconsole.log(\"NetPL = \".concat(closedPosition.getNetPL()));\nconsole.log(\"PLPips = \".concat(closedPosition.getPLPips()));\nconsole.log(\"GrossPL = \".concat(closedPosition.getGrossPL()));\nconsole.log(\"\");\n};\nClosedPositionPrinter.printAll = function (closedPositions) {\nconsole.log(\"Current closed positions snapshot:\");\nconsole.log(\"Number of closed positions: \".concat(closedPositions.length));\nclosedPositions.forEach(function (closedPosition) {\nClosedPositionPrinter.print(closedPosition);\n});\n};\nreturn ClosedPositionPrinter;\n}());\n</code></pre> <p>See also ClosedPosition</p> <p>Download the sample TypeScript, JavaScript.</p>"},{"location":"trading/getinstrumentbysymbol/","title":"Get Instrument By Symbol","text":"<p>How to get an instrument by symbol Overview</p> <p>In this article will learn how to use the API to get an instrument using its symbol as the reference. Before you can get an instrument using its symbol, you need to: - Create an instance of the instruments manager - Get an instrument by symbol</p> <p>Step 1: Create an instance of the instruments manager</p> <p>The first step is to create an instance of the instruments manager. This is an object that provides methods for managing instruments. You can use the IInstrumentsManager interface to access its methods and properties.</p> <p>Below you can see some example code to create an instance of the instruments manager:</p> TYPESCRIPTJAVASCRIPT <pre><code>session.getInstrumentsManager().refresh(); // refresh it before using it to make sure it contains the latest info\nlet instrumentsManager = session.getInstrumentsManager();\n</code></pre> <pre><code>session.getInstrumentsManager().refresh(); // refresh it before using it to make sure it contains the latest info\nlet instrumentsManager = session.getInstrumentsManager();\n</code></pre> <p>For more information about the IInstrumentsManager interface, see the API reference.</p> <p>Step 2: Get an instrument by symbol</p> <p>The next step is to get an instrument by its symbol. A symbol is a unique identifier for an instrument, such as EUR/USD or USD/JPY. You can use the getInstrumentBySymbol method of the instruments manager to get an instrument by its symbol. This method takes a symbol as an argument and returns an instrument object if you have subscribed to it. Otherwise, it returns null.</p> <p>Below you can see some example code to get an instrument by symbol:</p> TYPESCRIPTJAVASCRIPT <pre><code>let instrument = instrumentsManager.getInstrumentBySymbol(\"USD/JPY\");\n</code></pre> <pre><code>let instrument = instrumentsManager.getInstrumentBySymbol(\"USD/JPY\");\n</code></pre> <p>For more information about the getInstrumentBySymbol method, see the API reference.</p> <p>Conclusion</p> <p>You have learned how to use the API to get an instrument by symbol. You have created an instance of the instruments manager and got an instrument by symbol. You can now use this knowledge to build your own applications that work with instruments.</p> <p>You can download the sample TypeScript and JavaScript code from here.</p>"},{"location":"trading/getopenpositions/","title":"Get Open Positions","text":"<p>How to get a list of open positions Overview</p> <p>This article will show you how to use the API to get a list of open positions.  Before you can get a list of open positions, you need to: - Create an instance of the open positions manager - Create a position change listener - Create a listener for offer changes - Get detailed information about all open positions</p> <p>Step 1: Create an instance of the open positions manager</p> <p>The first step is to create an instance of the open positions manager. This is an object that provides methods for managing open positions.  You can use the IOpenPositionsManager interface to access its methods and properties.</p> <p>Below you can see some example code to create an instance of the open positions manager:</p> TYPESCRIPTJAVASCRIPT <pre><code>let openPositionsManager = session.getOpenPositionsManager();\n</code></pre> <pre><code>let openPositionsManager = session.getOpenPositionsManager();\n</code></pre> <p>For more information about the IOpenPositionsManager interface, see the API reference.</p> <p>Step 2: Create a position change listener</p> <p>The next step is to create a position change listener. This is a function that will be called whenever a position is opened, closed, or updated. You can use the getOpenPosition and getOpenPositionsSnapshot methods of the open positions manager to get a single position or a snapshot of all positions.</p> <p>Below you can see some example code to create a position change listener:</p> TYPESCRIPTJAVASCRIPT <pre><code>class OpenPositionChangeListener implements FXConnectLite.IOpenPositionChangeListener {\nprivate openPositionsManager: FXConnectLite.IOpenPositionsManager;\n\nconstructor(openPositionsManager: FXConnectLite.IOpenPositionsManager) {\nthis.openPositionsManager = openPositionsManager;\n}\n\nonChange(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is changed.`)\n\nOpenPositionPrinter.print(this.openPositionsManager.getOpenPosition(openPositionInfo.getId()));\n}\n\nonAdd(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is added.`)\n\nOpenPositionPrinter.print(this.openPositionsManager.getOpenPosition(openPositionInfo.getId()));\n}\n\nonDelete(openPositionInfo: FXConnectLite.OpenPositionInfo): void {\nPrinter.print(`OpenPosition ${openPositionInfo.getId()} is deleted.`)\n}\nonRefresh(): void {\nPrinter.print(`Open positions refreshed`)\nOpenPositionPrinter.printAll(this.openPositionsManager.getOpenPositionsSnapshot());\n}\n}\n</code></pre> <pre><code>OpenPositionChangeListener = /** @class */ (function () {\nfunction OpenPositionChangeListener(openPositionsManager) {\nthis.openPositionsManager = openPositionsManager;\n}\nOpenPositionChangeListener.prototype.onChange = function (openPositionInfo) {\nconsole.log(\"OpenPosition \".concat(openPositionInfo.getId(), \" is changed.\"));\nOpenPositionPrinter.print(this.openPositionsManager.getOpenPosition(openPositionInfo.getId()));\n};\nOpenPositionChangeListener.prototype.onAdd = function (openPositionInfo) {\nconsole.log(\"OpenPosition \".concat(openPositionInfo.getId(), \" is added.\"));\nOpenPositionPrinter.print(this.openPositionsManager.getOpenPosition(openPositionInfo.getId()));\n};\nOpenPositionChangeListener.prototype.onDelete = function (openPositionInfo) {\nconsole.log(\"OpenPosition \".concat(openPositionInfo.getId(), \" is deleted.\"));\n};\nOpenPositionChangeListener.prototype.onRefresh = function () {\nconsole.log(\"Open positions refreshed\");\nOpenPositionPrinter.printAll(this.openPositionsManager.getOpenPositionsSnapshot());\n};\nreturn OpenPositionChangeListener;\n}());\n</code></pre> <p>For more information about the getOpenPosition and getOpenPositionsSnapshot methods, see the API reference.</p> <p>Step 3: Create a listener for offer changes</p> <p>The third step is to create a listener for offer changes. This is a function that will be called whenever an offer's data changes, such as when its price, volume, or spread changes. You will need this listener if you want to display calculated fields for the positions, such as profit and loss, margin, or pip cost.</p> <p>Below you can see some example code to create a listener for offer changes:</p> TYPESCRIPTJAVASCRIPT <pre><code>class OfferChangeListener implements FXConnectLite.IOfferChangeListener {\nprivate openPositionsManager: FXConnectLite.IOpenPositionsManager;\n\nconstructor(openPositionsManager: FXConnectLite.IOpenPositionsManager) {\nthis.openPositionsManager = openPositionsManager;\n}\n\nonChange(offerInfo: FXConnectLite.OfferInfo): void {\nthis.print(offerInfo, `Offer ${offerInfo.getOfferId()} is changed.`);\n}\n\nonAdd(offerInfo: FXConnectLite.OfferInfo): void {\nthis.print(offerInfo, `Offer ${offerInfo.getOfferId()} is added.`);\n}\n\nprint(offerInfo: FXConnectLite.OfferInfo, text: string): void {\nvar was: boolean = false;\nthis.openPositionsManager.getOpenPositionsSnapshot().forEach(openPosition =&gt; {\nif(openPosition.getOfferId() == offerInfo.getOfferId()) {\nif(!was) {\nwas = true;\nPrinter.print(text)\n}\nPrinter.print(`Open position:`)\nOpenPositionPrinter.print(openPosition);\n}\n});\n}\n}\n</code></pre> <pre><code>let OfferChangeListener = /** @class */ (function () {\nfunction OfferChangeListener(openPositionsManager) {\nthis.openPositionsManager = openPositionsManager;\n}\nOfferChangeListener.prototype.onChange = function (offerInfo) {\nthis.print(offerInfo, \"Offer \".concat(offerInfo.getOfferId(), \" is changed.\"));\n};\nOfferChangeListener.prototype.onAdd = function (offerInfo) {\nthis.print(offerInfo, \"Offer \".concat(offerInfo.getOfferId(), \" is added.\"));\n};\nOfferChangeListener.prototype.print = function (offerInfo, text) {\nvar was = false;\nthis.openPositionsManager.getOpenPositionsSnapshot().forEach(function (openPosition) {\nif (openPosition.getOfferId() == offerInfo.getOfferId()) {\nif (!was) {\nwas = true;\nconsole.log(text);\n}\nconsole.log(\"Open position:\");\nOpenPositionPrinter.print(openPosition);\n}\n});\n};\nreturn OfferChangeListener;\n}());\n</code></pre> <p>For more information about the offer's data, see the API reference.</p> <p>Step 4: Get detailed information about all open positions</p> <p>The final step is to get detailed information about all open positions. You can use the OpenPosition interface to access the properties of an open position, such as its trade ID, amount, direction, instrument, and stop/limit orders.</p> <p>Below you can see some example code to get detailed information about all open positions:</p> TYPESCRIPTJAVASCRIPT <pre><code>class OpenPositionPrinter {\n\npublic static print(openPosition: FXConnectLite.OpenPosition): void {\nPrinter.print(``)\nPrinter.print(`TradeID = ${openPosition.getTradeID()}`)\nPrinter.print(`AccountId = ${openPosition.getAccountId()}`)\nPrinter.print(`AccountName = ${openPosition.getAccountName()}`)\nPrinter.print(`AccountKind = ${openPosition.getAccountKind()}`)\nPrinter.print(`OfferId = ${openPosition.getOfferId()}`)\nPrinter.print(`Amount = ${openPosition.getAmount()}`)\nPrinter.print(`BuySell = ${openPosition.getBuySell()}`)\nPrinter.print(`OpenRate = ${openPosition.getOpenRate()}`)\nPrinter.print(`OpenTime = ${openPosition.getOpenTime()}`)\nPrinter.print(`OpenQuoteId = ${openPosition.getOpenQuoteId()}`)\nPrinter.print(`OpenOrderId = ${openPosition.getOpenOrderId()}`)\nPrinter.print(`OpenOrderReqId = ${openPosition.getOpenOrderReqId()}`)\nPrinter.print(`OrderRequestTXT = ${openPosition.getOpenOrderRequestTXT()}`)\nPrinter.print(`Commission = ${openPosition.getCommission()}`)\nPrinter.print(`RolloverInterest = ${openPosition.getRolloverInterest()}`)\nPrinter.print(`TradeIdOrigin = ${openPosition.getTradeIdOrigin()}`)\nPrinter.print(`ValueDate = ${openPosition.getValueDate()}`)\nPrinter.print(`Parties = ${openPosition.getParties()}`)\nPrinter.print(`PL = ${openPosition.getPL()}`)\nPrinter.print(`PLPips = ${openPosition.getPLPips()}`)\nPrinter.print(`GrossPL = ${openPosition.getGrossPL()}`)\nPrinter.print(`CloseRate = ${openPosition.getCloseRate()}`)\nPrinter.print(`StopRate = ${openPosition.getStopRate()}`)\nPrinter.print(`LimitRate = ${openPosition.getLimitRate()}`)\nPrinter.print(`StopOrderId = ${openPosition.getStopOrderID()}`)\nPrinter.print(`LimitOrderId = ${openPosition.getLimitOrderID()}`)\nPrinter.print(`UsedMargin = ${openPosition.getUsedMargin()}`)\nPrinter.print(`Dividends = ${openPosition.getDividends()}`)\nPrinter.print(``)\n}\n\npublic static printAll(openPositions: FXConnectLite.OpenPosition[]): void {\nPrinter.print(`Current open position snapshot:`);\nPrinter.print(`Number of open positions is ${openPositions.length}`);\nopenPositions.forEach(openPosition =&gt; {\nOpenPositionPrinter.print(openPosition);\n});\n}\n}\n</code></pre> <pre><code>let OpenPositionPrinter = /** @class */ (function () {\nfunction OpenPositionPrinter() {\n}\nOpenPositionPrinter.print = function (openPosition) {\nconsole.log(\"\");\nconsole.log(\"TradeID = \".concat(openPosition.getTradeID()));\nconsole.log(\"AccountId = \".concat(openPosition.getAccountId()));\nconsole.log(\"AccountName = \".concat(openPosition.getAccountName()));\nconsole.log(\"AccountKind = \".concat(openPosition.getAccountKind()));\nconsole.log(\"OfferId = \".concat(openPosition.getOfferId()));\nconsole.log(\"Amount = \".concat(openPosition.getAmount()));\nconsole.log(\"BuySell = \".concat(openPosition.getBuySell()));\nconsole.log(\"OpenRate = \".concat(openPosition.getOpenRate()));\nconsole.log(\"OpenTime = \".concat(openPosition.getOpenTime()));\nconsole.log(\"OpenQuoteId = \".concat(openPosition.getOpenQuoteId()));\nconsole.log(\"OpenOrderId = \".concat(openPosition.getOpenOrderId()));\nconsole.log(\"OpenOrderReqId = \".concat(openPosition.getOpenOrderReqId()));\nconsole.log(\"OrderRequestTXT = \".concat(openPosition.getOpenOrderRequestTXT()));\nconsole.log(\"Commission = \".concat(openPosition.getCommission()));\nconsole.log(\"RolloverInterest = \".concat(openPosition.getRolloverInterest()));\nconsole.log(\"TradeIdOrigin = \".concat(openPosition.getTradeIdOrigin()));\nconsole.log(\"ValueDate = \".concat(openPosition.getValueDate()));\nconsole.log(\"Parties = \".concat(openPosition.getParties()));\nconsole.log(\"PL = \".concat(openPosition.getPL()));\nconsole.log(\"PLPips = \".concat(openPosition.getPLPips()));\nconsole.log(\"GrossPL = \".concat(openPosition.getGrossPL()));\nconsole.log(\"CloseRate = \".concat(openPosition.getCloseRate()));\nconsole.log(\"StopRate = \".concat(openPosition.getStopRate()));\nconsole.log(\"LimitRate = \".concat(openPosition.getLimitRate()));\nconsole.log(\"StopOrderId = \".concat(openPosition.getStopOrderID()));\nconsole.log(\"LimitOrderId = \".concat(openPosition.getLimitOrderID()));\nconsole.log(\"UsedMargin = \".concat(openPosition.getUsedMargin()));\nconsole.log(\"\");\n};\nOpenPositionPrinter.printAll = function (openPositions) {\nconsole.log(\"Current open position snapshot:\");\nconsole.log(\"Number of open positions is \".concat(openPositions.length));\nopenPositions.forEach(function (openPosition) {\nOpenPositionPrinter.print(openPosition);\n});\n};\nreturn OpenPositionPrinter;\n}());\n</code></pre> <p>For more information about the OpenPosition interface, see the API reference.</p> <p>You can download the sample TypeScript and JavaScript code from here.</p>"},{"location":"trading/getsubscribedinstruments/","title":"Get Subscribed Instruments","text":"<p>How to get a list of subscribed instruments Overview</p> <p>This article will teach you how to use the API to get a list of subscribed instruments. Before you can get a list of subscribed instruments, you need to: - Create an instance of the instruments manager - Get a list of subscribed instruments</p> <p>Step 1: Create an instance of the instruments manager</p> <p>The first step is to create an instance of the instruments manager. This is an object that provides methods for managing instruments. You can use the IInstrumentsManager interface to access its methods and properties.</p> <p>Below you can see some example code to create an instance of the instruments manager:</p> TYPESCRIPTJAVASCRIPT <pre><code>session.getInstrumentsManager().refresh(); // refresh it before using it to make sure it contains the latest info\nlet instrumentsManager = session.getInstrumentsManager();\n</code></pre> <pre><code>session.getInstrumentsManager().refresh(); // refresh it before using it to make sure it contains the latest info\nlet instrumentsManager = session.getInstrumentsManager();\n</code></pre> <p>For more information about the IInstrumentsManager interface, see the API reference.</p> <p>Step 2: Get a list of subscribed instruments</p> <p>The next step is to get a list of instruments that you have subscribed to. Subscribing to an instrument means that you will receive updates on its data, such as its price, volume, or spread. You can use the getSubscribedInstruments method of the instruments manager to get a list of subscribed instruments. This method returns an array of instrument symbols.</p> <p>Below you can see some example code to get a list of subscribed instruments:</p> TYPESCRIPTJAVASCRIPT <pre><code>let subscribedInstruments = instrumentsManager.getSubscribedInstruments();\n</code></pre> <pre><code>let subscribedInstruments = instrumentsManager.getSubscribedInstruments();\n</code></pre> <p>For more information about the getSubscribedInstruments method, see the API reference.</p> <p>Conclusion</p> <p>You have learned how to use the API to get a list of subscribed instruments. You have created an instance of the instruments manager and got a list of subscribed instruments. You can now use this knowledge to build your own applications that work with subscribed instruments.</p> <p>You can download the sample TypeScript and JavaScript code from here. Happy coding!</p>"},{"location":"trading/retreivehistoricalpricesforaninstrument/","title":"Get Historical Prices for an Instrument","text":"<p>How to receive historical prices for an instrument Overview</p> <p>This article will show you how to use the API to receive historical prices for an instrument. Before you can get historical data, you need to: - Create a callback class for receiving price history - Get the price history of an instrument - Check if the price history contains an ask price</p> <p>Step 1: Create a callback class for receiving price history</p> <p>The first step is to create a callback class that will handle the response from the API when requesting price history. You can use the PriceHistoryManagerCallback interface to define the methods of this class.</p> <p>Below you can see some example code for creating a callback class for receiving price history:</p> TYPESCRIPTJAVASCRIPT <pre><code>class PriceHistoryManagerCallback implements FXConnectLite.IPriceHistoryManagerCallback {\nresolve: any;\napp: Application;\nonSuccess(responseObject: FXConnectLite.IPriceHistoryResponse) {\nPriceHistoryPrinter.printAll(responseObject, this.app);\nthis.resolve();\n}\n\nonError(errorObject: FXConnectLite.IFXConnectLiteError) {\nPrinter.print(errorObject.getMessage());\nthis.resolve();\n}\n\nconstructor(resolve: any, app: Application) {\nthis.resolve = resolve;\nthis.app = app;\n}\n}\n</code></pre> <pre><code>let PriceHistoryManagerCallback = /** @class */ (function () {\nfunction PriceHistoryManagerCallback(resolve, app) {\nthis.resolve = resolve;\nthis.app = app;\n}\nPriceHistoryManagerCallback.prototype.onSuccess = function (responseObject) {\nPriceHistoryPrinter.printAll(responseObject, this.app);\nthis.resolve();\n};\nPriceHistoryManagerCallback.prototype.onError = function (errorObject) {\nconsole.log(errorObject.getMessage());\nthis.resolve();\n};\nreturn PriceHistoryManagerCallback;\n}());\n</code></pre> <p>For more information about the PriceHistoryManagerCallback interface, see the API reference.</p> <p>Step 2: Get the price history of an instrument</p> <p>The next step is to get the price history of a specific instrument.  You can use the getPriceHistory method of the API to request the price history of an instrument by its name.  This method takes a PriceHistoryManagerCallback object as an argument and calls its onSuccess or onError method depending on the result.</p> <p>Below you can see some example code for getting the price history of an instrument:</p> TYPESCRIPTJAVASCRIPT <pre><code>manager = session.getPriceHistoryManager();\nthis.timeframe = FXConnectLite.Timeframe.create(FXConnectLite.TimeframeUnit.Minute, 30);\nmanager.getPrices(this.instrument, this.timeframe, this.from, this.to, -1, new PriceHistoryManagerCallback(resolve, this));\n</code></pre> <pre><code>let manager = session.getPriceHistoryManager();\nlet timeframe = FXConnectLite.Timeframe.create(FXConnectLite.TimeframeUnit.Minute, 30);\nmanager.getPrices(this.instrument, this.timeframe, this.from, this.to, -1, new PriceHistoryManagerCallback(resolve, this));\n</code></pre> <p>For more information about the getPriceHistory method, see the API reference.</p> <p>Step 3: Check if the price history contains an ask price</p> <p>The final step is to check if the price history of an instrument contains an ask price. The ask price is the price at which you can buy an instrument. You need to know the ask price to correctly place limit buy orders. However, not all instruments have an ask price in their history.</p> <p>To check if the price history of an instrument contains an ask price, you can use the hasAskPrice method of the API. This method takes the name of the instrument as an argument and returns a boolean value. The method will return true if the instrument's history has an ask price, and false if it does not.</p> <p>Below you can see some example code to check if the price history contains an ask price:</p> TYPESCRIPTJAVASCRIPT <pre><code>manager = session.getPriceHistoryManager();\nlet hasAskPrice = manager.hasAskPrice(\"EUR/USD\");\n</code></pre> <pre><code>manager = session.getPriceHistoryManager();\nlet hasAskPrice = manager.hasAskPrice(\"EUR/USD\");\n</code></pre> <p>For more information about the hasAskPrice method, see the API reference.</p> <p>You can download the sample TypeScript and JavaScript.</p>"},{"location":"trading/retreivepriceupdatesforaninstrument/","title":"Get Prices Updates for an Instrument","text":"<p>How to receive price updates for an instrument Overview</p> <p>This article will show you how to use the API to receive price updates for an instrument. Before you can receive price updates for an instrument, you need to: - Subscribe to the offers manager change event - Create an offer's state change listener - Receive price updates for an instrument</p> <p>Step 1: Subscribe to the offers manager change event</p> <p>The first step is to subscribe to the offers manager change event. This event is triggered when the offer data has changed, such as when a new offer is added, removed, or updated. You can use the IOffersManager interface to access the methods and properties of the offers manager.</p> <p>Below you can see some example code for subscribing to the offers manager change event:</p> TYPESCRIPTJAVASCRIPT <pre><code>let offersManager = session.getOffersManager();\n//subscribe to the offersManager change to get an event when offer data has changed\noffersManager.subscribeOfferChange(new OfferChangeListener(instrumentsManager, offersManager))\noffersManager.subscribeStateChange(new OffersStateChangeListener(offersManager, instrumentsManager));\n</code></pre> <pre><code>let offersManager = session.getOffersManager();\n//subscribe to the offersManager change to get an event when offer data has changed\noffersManager.subscribeOfferChange(new OfferChangeListener(instrumentsManager, offersManager));\noffersManager.subscribeStateChange(new OffersStateChangeListener(offersManager, instrumentsManager));\n</code></pre> <p>For more information about the IOffersManager interface, see the API reference.</p> <p>Step 2: Create an offer's state change listener</p> <p>The next step is to create an offer's state change listener. This is a function that will be called whenever an offer's state changes, such as when its price, volume, or spread changes. You can use the getOfferById method of the offers manager to get an offer by its ID.</p> <p>Below you can see some example code to create an offer's state change listener:</p> TYPESCRIPTJAVASCRIPT <pre><code>class OfferChangeListener implements FXConnectLite.IOfferChangeListener {\nprivate isFirstOfferChange: boolean = false;\nprivate instrumentsManager: FXConnectLite.IInstrumentsManager;\nprivate offersManager: FXConnectLite.IOffersManager;\n\npublic constructor(instrumentManager: FXConnectLite.IInstrumentsManager, offersManager: FXConnectLite.IOffersManager) {\nthis.instrumentsManager = instrumentManager;\nthis.offersManager = offersManager;\n}\n\nonChange(offerInfo: FXConnectLite.OfferInfo): void {\nif (!this.isFirstOfferChange) {\nPrinter.print(``);\nPrinter.print(`Offers changes:`);\nPrinter.print(``);\nPrinter.print(OfferFormatter.TITLE);\nthis.isFirstOfferChange = true;\n}\nlet offer = this.offersManager.getOfferById(offerInfo.getOfferId());\nPrinter.print(`${OfferFormatter.format(offer, this.instrumentsManager)}`);\n}\nonAdd(offerInfo: FXConnectLite.OfferInfo): void {\n//do nothing\n}\n}\n</code></pre> <pre><code>let OffersStateChangeListener = /** @class */ (function () {\nfunction OffersStateChangeListener(offersManager, instrumentManager) {\nthis.offersManager = offersManager;\nthis.instrumentManager = instrumentManager;\n}\nOffersStateChangeListener.prototype.printOffers = function (title, offers) {\nvar _this = this;\nconsole.log(\"\");\nconsole.log(title);\nconsole.log(\"\");\nconsole.log(OfferFormatter.TITLE);\noffers.forEach(function (offer) { return console.log(OfferFormatter.format(offer, _this.instrumentManager)); });\n};\nOffersStateChangeListener.prototype.onStateChange = function (state) {\nif (state.isLoaded()) {\nthis.printOffers(\"All initial offers:\", this.offersManager.getAllOffers());\n}\n};\nreturn OffersStateChangeListener;\n}());\nlet OfferChangeListener = /** @class */ (function () {\nfunction OfferChangeListener(instrumentManager, offersManager) {\nthis.isFirstOfferChange = false;\nthis.instrumentsManager = instrumentManager;\nthis.offersManager = offersManager;\n}\nOfferChangeListener.prototype.onChange = function (offerInfo) {\nif (!this.isFirstOfferChange) {\nconsole.log(\"\");\nconsole.log(\"Offers changes:\");\nconsole.log(\"\");\nconsole.log(OfferFormatter.TITLE);\nthis.isFirstOfferChange = true;\n}\nvar offer = this.offersManager.getOfferById(offerInfo.getOfferId());\nconsole.log(\"\".concat(OfferFormatter.format(offer, this.instrumentsManager)));\n};\nOfferChangeListener.prototype.onAdd = function (offerInfo) {\n//do nothing\n};\nreturn OfferChangeListener;\n}());\n</code></pre> <p>For more information about the getOfferById method, see the API reference.</p> <p>Step 3: Receive price updates for an instrument</p> <p>The final step is to receive price updates for an instrument. You can use the subscribeStateChange method of the offer object to subscribe to its state changes. This method takes an offer's state change listener as an argument and returns a subscription object. You can also use the refresh method of the subscription object to manually request a price update.</p> <p>Below you can see some example code to receive price updates for an instrument:</p> TYPESCRIPTJAVASCRIPT <pre><code>private loadOffers = async (session) =&gt; {\nreturn new Promise&lt;void&gt;((resolve, reject) =&gt; {\nif(session.getOffersManager().getState().isLoaded())\nresolve();\nelse {\nlet completeHandler = new CompleteLoadingHandler(resolve, this.timeout);\nsession.getOffersManager().subscribeStateChange(completeHandler);\nsession.getOffersManager().refresh();\n}\n})\n}\n</code></pre> <pre><code>this.loadInstruments = async function (session) {\nreturn new Promise(function (resolve, reject) {\nvar completeHandler = new CompleteLoadingHandler(resolve, me.timeout);\nsession.getInstrumentsManager().subscribeStateChange(completeHandler);\nsession.getInstrumentsManager().refresh();     });\n};\n</code></pre> <p>For more information about the subscribeStateChange and refresh methods, see the API reference.</p> <p>You can download the sample TypeScript and JavaScript code from here. </p>"},{"location":"trading/subscribeandunsubscribetoinstruments/","title":"Subscribe To Or Unsucribe From An Instrument","text":"<p>How to subscribe and unsubscribe to instruments Introduction</p> <p>This article will show you how to subscribe and unsubscribe to instruments, which are the financial assets that you can trade on the platform, such as currency pairs, stocks, indices, etc. You can use the IInstrumentsManager interface to manage your subscriptions and get information about the instruments.</p> Steps <p>To subscribe and unsubscribe to instruments, you need to follow these steps:</p> <ol> <li>Create a SubscribeCallback object, which is a callback class that handles the subscription results. You can use the following code to create a SubscribeCallback object:</li> </ol> TYPESCRIPTJAVASCRIPT <pre><code>class SubscribeCallback implements FXConnectLite.ISubscribeInstrumentsCallback {\nresolve;\n\nconstructor(resolve) {\nthis.resolve = resolve;\n}\nonSuccess() {\nPrinter.print(\"Subscribe success\");\nthis.resolve();\n}\nonError(error: string) {\nPrinter.print(\"Subscribe error: \"+ error);\nthis.resolve();\n}\n}\n</code></pre> <pre><code>SubscribeCallback = {\nonSuccess: function () {\nconsole.log('Subscribe Success:', { subscribedSymbols: subscribedSymbols });\n},\nonError: function (error) {\nconsole.log('Subscribe Fail:', { error: error });\n}\n};\n</code></pre> <p>The onError method is called if at least one subscription to an instrument fails.</p> <p>For more information about the SubscribeCallback class and its methods, see ISubscribeInstrumentsCallback.</p> Getting a list of your subscribed instruments <p>You can check the list of subscribed instruments by calling the instrument manager's getSubscribedInstruments method. To obtain a list of your subscribed instruments, please read this item: https://docs.gehtsoftusa.com/fclite/howto_get_a_list_of_subscribed_instruments.html</p> Getting an instrument symbol <p>Get an instrument symbol using the InstrumentDescriptor class, which is a helper class that helps you identify an instrument by its name, type, and exchange.</p> <p>You can use the following code to get an instrument symbol:</p> TYPESCRIPTJAVASCRIPT <pre><code>let instrumentSymbol = instrumentsManager.getSubscribedInstruments()[0].getSymbol();\ninstrumentsManager.unsubscribeInstruments([instrumentSymbol], new UnsubscribeCallback(resolve));\n</code></pre> <pre><code>var instrumentSymbol = instrumentsManager.getSubscribedInstruments()[0].getSymbol();\nsession.getInstrumentsManager().unsubscribeInstruments([instrumentSymbol], unsubscribeInstrumentsCallback);\n</code></pre> <p>For more information about the InstrumentDescriptor class and its methods, see getSymbol.</p> Subscribing To An Instrument <p>To subscribe to an instrument, you use the instrument manager's subscribe method and pass it the symbol of the instrument and the callback function.</p> <p>You can use the following code to create an SubscribeCallback object:</p> TYPESCRIPTJAVASCRIPT <pre><code>instrumentsManager.subscribeInstruments([\"EUR/GBP\", \"EUR/USD\"], new SubscribeCallback(resolve));\n</code></pre> <pre><code>session.getInstrumentsManager().subscribeInstruments([\"EUR/GBP\", \"EUR/USD\"], subscribeInstrumentsCallback);\n</code></pre> <p>This instrument will now appear on your list of subscribed instruments when performing the getSubscribedInstruments action.</p> <p>See also IInstrumentsManager, ISubscribeInstrumentsCallback</p> Unsubscribing From An Indicator <p>Create an UnsubscribeCallback object, which is a callback class that handles the unsubscription results.</p> <p>You can use the following code to create an UnsubscribeCallback object:</p> TYPESCRIPTJAVASCRIPT <pre><code>class UnsubscribeCallback implements FXConnectLite.ISubscribeInstrumentsCallback {\nresolve;\n\nconstructor(resolve) {\nthis.resolve = resolve;\n}\n\nonSuccess() {\nPrinter.print(\"Unsubscribe success\");\nthis.resolve();\n}\nonError(error: string) {\nPrinter.print(\"Unsubscribe error: \"+ error);\nthis.resolve();\n}\n}\n</code></pre> <pre><code>UnsubscribeCallback = {\nonSuccess: function () {\nconsole.log('Unsubscribe Success:', { subscribedSymbols: subscribedSymbols });\n},\nonError: function (error) {\nconsole.log('Unsubscribe Fail:', { error: error });\n}\n};\n</code></pre> <p>The onError method is called if at least one unsubscription to an instrument fails.</p> <p>This instrument will no longer appear on your list of subscribed instruments when performing the getSubscribedInstruments action.</p> <p>For more information about the UnsubscribeCallback class and its methods, see ISubscribeInstrumentsCallback.</p> <p>Examples</p> <p>You can download and run the sample TypeScript and JavaScript files to see how to subscribe and unsubscribe to instruments in action.</p>"}]}