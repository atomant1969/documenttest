{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is FCLite","text":"<p>FCLite API is an application programming interface (API) that allows you to access the FXCM trading platform and execute various trading operations. It is designed to be fast, flexible, and reliable for algorithmic and automated trading.</p> <p>FCLite API supports various data providers, such as SQL Server, Oracle, MySQL, SQLite, and more. It also supports various data types, parameters, transactions, bulk operations, caching, logging, and tracing. You can use FCLite API to perform both query and command operations, such as getting live and historical prices, creating and modifying orders, managing positions, and receiving market data updates.</p> <p>FCLite API is compatible with .NET applications and can be easily installed using the NuGet Package Manager in Visual Studio or the dotnet CLI tool. You can also find the source code and documentation on the  GitHub repository.</p> <p>FCLite API is developed and maintained by  Gehtsoft USA LLC, a software development company that specializes in complex and mission-critical projects for various industries, such as finance, trading, education, and healthcare.</p> <p>If you have any questions, feedback, or issues regarding FCLite API, please feel free to  contact us  or  open an issue  on GitHub.</p> <p>We hope you enjoy using FCLite API and find it useful for your trading needs.</p>"},{"location":"examples/deletedata/","title":"Delete Data","text":"<p>This is normal content without tabs.</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre>"},{"location":"installation/configurationandsettings/","title":"Configuration and Settings","text":"<p>After you download and install FCLite API, you need to configure some settings to use it in your application. Here are the main steps that you need to follow:</p> <p>Create a configuration file for FCLite API, which contains the information about the server URL, the access token, the log level, and the log file path. You can use the sample configuration file provided by Gehtsoft USA LLC here: https://docs.gehtsoftusa.com/fclite/#configuration.html Load the configuration file in your code using the FCLite API methods for your language. For example, if you use C++, you can use the method FXCM::Config::load(const char* fileName) to load the configuration file from a given file name. Create a session object for FCLite API, which represents a connection to the FXCM trading platform. You can use the FCLite API methods for your language to create and manage the session object. For example, if you use C++, you can use the method FXCM::Session::create() to create a session object. Use the session object to perform various trading operations with FCLite API, such as logging in, logging out, subscribing to market data, placing orders, modifying trades, retrieving historical data, and more. You can use the FCLite API methods for your language to access and manipulate the session object. For example, if you use C++, you can use the method FXCM::Session::login() to log in to the FXCM trading platform using the session object. For more details on how to configure and use FCLite API for each language, you can refer to the documentation and examples provided by Gehtsoft USA LLC here: https://docs.gehtsoftusa.com/fclite/#howto.html</p> <p>If you encounter any problems or have any questions during the configuration process, you can contact Gehtsoft USA LLC's support team at support@gehtsoftusa.com or visit their website at https://gehtsoftusa.com/.</p>"},{"location":"installation/downloadandinstall/","title":"Download and Install","text":"<p>To download and install FCLite API, you need to follow these steps:</p> <p>The first step of adding FXLite to your project is to ensure that you have the npm application installed if you are using a Microsoft Windows computer. </p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>The next step is to create a file named .npmrc in the root of your project containing a single command:</p> <pre><code>@gehtsoft:registry=https://www.myget.org/F/gehtsoft-public/npm/\n</code></pre> <p>You should open a command prompt and change to the directory containing your project. Then you need to execute the command:</p> <p>npm install @gehtsoft/forex-connect-lite</p> <p>This will download two packages to your project directory: forex-connect-lite to work in browser and forex-connect-lite-node for node projects. Now you can access the FXLite API from your project.</p>"},{"location":"installation/prerequisites/","title":"Prerequisites","text":"<p>Before you start using FCLite, you need to make sure that you have the following prerequisites:</p> <ul> <li>NetCore SDK 5.0 Installation Instructions Minimum Requirements (https://learn.microsoft.com/en-us/dotnet/core/install/),</li> <li>NodeJS v.14.21.3 or higher Minimum requirements installation instructions (https://nodejs.org/en/download),</li> <li>Java 8 JDK or higher (https://www.java.com/ru/download/help/download_options_ru.html),</li> <li> <p>Apache Maven (https://maven.apache.org/download.cgi).</p> </li> <li> <p>A trading account with Forex Capital Markets (FXCM), one of the world's leading providers of online foreign exchange trading, CFD trading, and related services.You can open a demo or a live account here: https://www.fxcm.com/uk/</p> </li> <li>A valid access token for FCLite API, which you can obtain from FXCM after opening an account. You will need this token to authenticate your requests to the API.</li> <li>A compatible programming language and environment for FCLite API, which supports C++, Java, .NET, and Python. You can find the documentation and examples for each language here: https://docs.gehtsoftusa.com/fclite/#howto.html</li> <li>A basic understanding of how FCLite API works and what it can do for you. FCLite is a powerful and flexible API that allows you to access FXCM's trading platform and execute various trading operations, such as placing orders, modifying trades, subscribing to market data, retrieving historical data, and more. FCLite is developed by Gehtsoft USA LLC, a software development company that specializes in custom FinTech solutions and system integration1.</li> <li>If you have any questions or issues with FCLite API, you can contact Gehtsoft USA LLC's support team at support@gehtsoftusa.com or visit their website at https://gehtsoftusa.com/.</li> </ul> <p>FCLite requires 1GB of free disk space and an Internet connection:  You will need to download about 100 MB of external dependencies.  At least 4 GB RAM and 2 free CPU cores are recommended.</p>"},{"location":"introduction/howdoesfclitework/","title":"How does FCLite work?","text":"<p>FCLite is a powerful and flexible API that allows you to access the Forex Capital Markets (FXCM) trading platform and execute various trading operations. FCLite is developed by Gehtsoft USA LLC, a leading software development company that specializes in custom FinTech solutions1.</p> <p>FCLite is based on the Forex Connect API, which was originally designed by Gehtsoft for FXCM and has been widely used by millions of traders and brokers around the world1. FCLite is a re-coded and improved version of Forex Connect that offers better performance, stability, and compatibility.</p> <p>With FCLite, you can: - Connect to FXCM servers and get real-time market data. - Place, modify, and cancel orders. - Monitor your account balance, equity, margin, and positions. - Subscribe to price updates and market events. - Execute custom trading strategies and algorithms.</p> <p>FCLite supports multiple programming languages, such as C++, Java, .NET, TypeScript, JavaScript, Go, and more. You can use FCLite with various platforms and devices, such as Windows, Linux, MacOS, iOS, Android, web browsers, etc.</p> <p>FCLite is easy to use and integrate with your existing applications. You can download the FCLite SDK from gehtsoftusa.com and follow the documentation and examples to get started. You can also contact Gehtsoft for technical support and custom development services.</p> <p>FCLite is a reliable and secure API that complies with FXCM's policies and regulations. You can trust FCLite to handle your trading needs with speed and accuracy.</p>"},{"location":"introduction/whatisfclite/","title":"What is FCLite","text":"<p>FCLite API is an application programming interface (API) that allows you to access the FXCM trading platform and execute various trading operations. It is designed to be fast, flexible, and reliable for algorithmic and automated trading.</p> <p>FCLite API supports various data providers, such as SQL Server, Oracle, MySQL, SQLite, and more. It also supports various data types, parameters, transactions, bulk operations, caching, logging, and tracing. You can use FCLite API to perform both query and command operations, such as getting live and historical prices, creating and modifying orders, managing positions, and receiving market data updates.</p> <p>FCLite API is compatible with .NET applications and can be easily installed using the NuGet Package Manager in Visual Studio or the dotnet CLI tool. You can also find the source code and documentation on the  GitHub repository.</p> <p>FCLite API is developed and maintained by  Gehtsoft USA LLC, a software development company that specializes in complex and mission-critical projects for various industries, such as finance, trading, education, and healthcare.</p> <p>If you have any questions, feedback, or issues regarding FCLite API, please feel free to  contact us  or  open an issue  on GitHub.</p> <p>We hope you enjoy using FCLite API and find it useful for your trading needs.</p>"},{"location":"introduction/whyusefclite/","title":"Why use FCLite","text":"<p>FCLite is a powerful and flexible API that allows you to access and trade on the Forex Capital Markets platform. With FCLite, you can create custom applications, scripts and strategies that suit your trading needs and preferences. </p> <p>FCLite provides you with a comprehensive set of classes and interfaces that cover all aspects of trading, such as accounts, instruments, orders, positions, prices, margins, rollovers and more. </p> <p>FCLite also supports multiple languages, platforms and protocols, making it easy to integrate with your existing systems and tools. Whether you are a beginner or an expert trader, FCLite can help you enhance your trading experience and performance with Forex Capital Markets.</p>"},{"location":"trading/addstoplimit/","title":"Adding Stop/Limit","text":"<p>Adding Stop/Limit</p> <p>How to attach a stop limit order to a position or an order. A stop limit order is a special kind of order that lets you set a price range for buying or selling an instrument. It has two parts: a stop price and a limit price. The stop price is the level that activates the order. The limit price is the level that executes the order.</p> <p>For example, suppose you want to buy EUR/USD at 1.2000, but you don't want to pay more than 1.2050. You can place a stop limit order with a stop price of 1.2000 and a limit price of 1.2050. This means that when the market price reaches 1.2000, your order will become active and try to buy EUR/USD at 1.2050 or lower. However, if the market price jumps above 1.2050 before your order is executed, your order will not be filled.</p> <p>You can use a stop limit order to protect your profits or limit your losses on an existing position, or to enter a new position at a specific price range. To do this, you need to use the FCLite library, which is a Java package that connects to the trading platform's API.</p> Creating the Managers <p>To add a stop limit order to a position or an order, you need to follow these steps: 1. Create a Session object that allows you to connect to the server and log in with your credentials. 2. Create an OpenPositionsManager object that allows you to manage the open positions. 3. Create an OrdersManager object that allows you to manage the orders.</p> <p>Creating these objects is simple as you can see below.</p> TYPESCRIPTJAVASCRIPT <pre><code>let openPositionsManager = session.getOpenPositionsManager(); // get open positions manager\nlet ordersManager = session.getOrdersManager(); // get orders manager\n</code></pre> <pre><code>let openPositionsManager = session.getOpenPositionsManager(); // get open positions manager\nlet ordersManager = session.getOrdersManager(); // get orders manager\n</code></pre> Creating the Listeners <ol> <li>Add order change listeners to the OpenPositionsManager and OrdersManager objects to handle the events related to the orders and positions.</li> </ol> TYPESCRIPTJAVASCRIPT <pre><code>const orderChangeListener = new OrderChangeListener(ordersManager, openPositionsManager); //create listener on the two created managers\nsession.getOrdersManager().subscribeOrderChange(orderChangeListener); //attach the listener to the session object to make it active.\n</code></pre> <pre><code>let orderChangeListener = new OrderChangeListener(ordersManager, openPositionsManager); //create listener on the two created managers\nsession.getOrdersManager().subscribeOrderChange(orderChangeListener); //attach the listener to the session object to make it active.\n</code></pre> <p>See also IOpenPositionsManager, IOrdersManager, subscribeOrderChange</p> Creating the Listeners: Usage <p>Get the ID of the position or order that you want to attach a stop limit order to.  You can use the GetPositions or GetOrders methods of the Session object to retrieve the positions or orders. Specify the parameters of the stop limit order, such as: - The stop price, the limit price, and the quantity.  - The stop price is the price at which the stop limit order will be triggered.  - The limit price is the price at which the stop limit order will be executed.  - The quantity is the number of contracts or shares to trade. Below you can see some example code for creating the listeners that are used above:</p> TYPESCRIPTJAVASCRIPT <pre><code>class OrderChangeListener implements FXConnectLite.IOrderChangeListener {\nconstructor(private ordersManager: FXConnectLite.IOrdersManager, private openPositionsManager: FXConnectLite.IOpenPositionsManager) {\n\n}\nonChange(orderInfo) {\nconst order = this.ordersManager.getOrderById(orderInfo.getOrderId());\nPrinter.print(`changed order ${orderInfo.getOrderId()} status ${order.getStatus()}`);\n}\nonAdd(orderInfo) {\nconst order = this.ordersManager.getOrderById(orderInfo.getOrderId());\nPrinter.print(\"added order, id = \" + orderInfo.getOrderId()+ \", type = \" + order.getType());\nif(order.getTradeId() != null &amp; (order.getType() == \"L\" || order.getType() == \"S\")) {\nlet openPosition = this.openPositionsManager.getOpenPosition(order.getTradeId());\nPrinter.print(`OpenPosition ${order.getTradeId()} changed. Stop or limit order is attached.`)\nPrinter.print(OpenPositionFormatter.TITLE);\nPrinter.print(OpenPositionFormatter.format(openPosition));\n}\n}\nonDelete(orderInfo) {\nPrinter.print(\"deleted order \" + orderInfo.getOrderId());\n}\nonError(orderInfo) {\nPrinter.print(\"order error \" + orderInfo.getError().getMessage());\n}\n}\n</code></pre> <pre><code>let OrderChangeListener = /** @class */ (function () {\nfunction OrderChangeListener(ordersManager, openPositionsManager) {\nthis.ordersManager = ordersManager;\nthis.openPositionsManager = openPositionsManager;\n}\nOrderChangeListener.prototype.onChange = function (orderInfo) {\nvar order = this.ordersManager.getOrderById(orderInfo.getOrderId());\nconsole.log(\"changed order \".concat(orderInfo.getOrderId(), \" status \").concat(order.getStatus()));\n};\nOrderChangeListener.prototype.onAdd = function (orderInfo) {\nvar order = this.ordersManager.getOrderById(orderInfo.getOrderId());\nconsole.log(\"added order, id = \" + orderInfo.getOrderId() + \", type = \" + order.getType());\nif (order.getTradeId() != null &amp; (order.getType() == \"L\" || order.getType() == \"S\")) {\nvar openPosition = this.openPositionsManager.getOpenPosition(order.getTradeId());\nconsole.log(\"OpenPosition \".concat(order.getTradeId(), \" changed. Stop or limit order is attached.\"));\nconsole.log(OpenPositionFormatter.TITLE);\nconsole.log(OpenPositionFormatter.format(openPosition));\n}\n};\nOrderChangeListener.prototype.onDelete = function (orderInfo) {\nconsole.log(\"deleted order \" + orderInfo.getOrderId());\n};\nOrderChangeListener.prototype.onError = function (orderInfo) {\nconsole.log(\"order error \" + orderInfo.getError().getMessage());\n};\nreturn OrderChangeListener;\n}());\n</code></pre> <p>See also OrderInfo, IOrdersManager, getOrderById, getOpenPosition, Order</p> Creating the stop and limit order for an open position and an order <p>The method below shows how to create a stop and limit order for an open position and an order:</p> TYPESCRIPTJAVASCRIPT <pre><code>private attachStopLimitOrderForTradeAndOrder = async (session: FXConnectLite.IFXConnectLiteSession, tradeId: string, orderId: string, type: string, timeout : number) =&gt; {\nreturn new Promise&lt;void&gt;(async (resolve, reject) =&gt; {\nlet manager = session.getOrdersManager();\n\nconst openPosition = session.getOpenPositionsManager().getOpenPosition(tradeId);\n\nif (type === 'stop') {\nlet builder = manager.getRequestFactory().createStopOrderRequestBuilder();\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setOrderId(orderId);\nbuilder.setRate(openPosition.getOpenRate() - openPosition.getOpenRate()/100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nlet builder = manager.getRequestFactory().createLimitOrderRequestBuilder();\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setOrderId(orderId);\nbuilder.setRate(openPosition.getOpenRate() + openPosition.getOpenRate()/100);\nmanager.createLimitOrder(builder.build());\n}\n\nsetTimeout(function () { resolve(); }, timeout);\n});\n}\n</code></pre> <pre><code>this.attachStopLimitOrderForTradeAndOrder = async function (session, tradeId, orderId, type, timeout){\nreturn new Promise(function (resolve, reject) {\nmanager = session.getOrdersManager();\nopenPosition = session.getOpenPositionsManager().getOpenPosition(tradeId); //get open position by trade Id\nif (type === 'stop') {\nbuilder = manager.getRequestFactory().createStopOrderRequestBuilder(); // if stop create stop order using builder\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setOrderId(orderId);\nbuilder.setRate(openPosition.getOpenRate() - openPosition.getOpenRate() / 100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nbuilder = manager.getRequestFactory().createLimitOrderRequestBuilder(); //create limit order using builder\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setOrderId(orderId);\nbuilder.setRate(openPosition.getOpenRate() + openPosition.getOpenRate() / 100);\nmanager.createLimitOrder(builder.build());\n}\nsetTimeout(function () { resolve(); }, timeout);\nresolve()\n});\n};\n</code></pre> <p>Use the attachStopLimitOrderForTradeAndOrder method of the this object to add a stop limit order to the position or order. The method returns a StopLimitOrder object that represents the created stop limit order.</p> Stop and limit order for an open position and an order: Usage <p>The example code below shows how you can use the above method to create a stop and limit order for an open position and an order:</p> TYPESCRIPTJAVASCRIPT <pre><code>if (tradeId &amp; orderId) {\nconst openPositions = session.getOpenPositionsManager().getOpenPositionsSnapshot();\nif (openPositions.length &gt; 0) {\nthis.printOpenPositionsSnapshot(openPositions);\nreturn this.attachStopLimitOrderForTradeAndOrder(session, options.tradeId, options.orderId, options.orderType, this.timeout);\n}\nelse {\nPrinter.print(`No open positions`)\nthis.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\n</code></pre> <pre><code>if (tradeId &amp; orderId) {\nvar openPositions = session.getOpenPositionsManager().getOpenPositionsSnapshot();\nif (openPositions.length &gt; 0) {\n_this.printOpenPositionsSnapshot(openPositions); //show properties\nreturn _this.attachStopLimitOrderForTradeAndOrder(session, tradeId, orderId, orderType, _this.timeout);\n}\nelse {\nconsole.log(\"No open positions\");\n_this.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\n</code></pre> <p>See also IOpenPositionsManager, getOpenPositionsSnapshot</p> Stop and limit order for an open position only <p>This method below shows how to create a stop and limit order for an open position only:</p> TYPESCRIPTJAVASCRIPT <pre><code>private attachStopLimitOrderForTrade = async (session: FXConnectLite.IFXConnectLiteSession, tradeId: string, type: string, timeout : number) =&gt; {\nreturn new Promise&lt;void&gt;(async (resolve, reject) =&gt; {\nlet manager = session.getOrdersManager();\n\nconst openPosition = session.getOpenPositionsManager().getOpenPosition(tradeId);\n\nif (type === 'stop') {\nlet builder = manager.getRequestFactory().createStopOrderRequestBuilder();\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setRate(openPosition.getOpenRate() - openPosition.getOpenRate()/100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nlet builder = manager.getRequestFactory().createLimitOrderRequestBuilder();\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setRate(openPosition.getOpenRate() + openPosition.getOpenRate()/100);\nmanager.createLimitOrder(builder.build());\n}\n\nsetTimeout(function () { resolve(); }, timeout);\n});\n}\n</code></pre> <pre><code>this.attachStopLimitOrderForTrade = async function (session, tradeId, type, timeout){\nreturn new Promise(function (resolve, reject) {\nvar manager, openPosition, builder, builder;\nmanager = session.getOrdersManager();\nopenPosition = session.getOpenPositionsManager().getOpenPosition(tradeId); //get open position by trade Id\nif (type === 'stop') {\nbuilder = manager.getRequestFactory().createStopOrderRequestBuilder(); // if stop create stop order using builder\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setRate(openPosition.getOpenRate() - openPosition.getOpenRate() / 100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nbuilder = manager.getRequestFactory().createLimitOrderRequestBuilder(); //create limit order using builder\nbuilder.setTradeId(openPosition.getTradeID());\nbuilder.setRate(openPosition.getOpenRate() + openPosition.getOpenRate() / 100);\nmanager.createLimitOrder(builder.build());\n}\nsetTimeout(function () { resolve(); }, timeout);\nresolve();\n});\n};\n</code></pre> <p>See also OpenPosition, IOrdersManager, createStopOrder, createLimitOrder, Order, getRequestFactory, createStopOrderRequestBuilder, StopOrderRequestBuilder</p> Stop and limit order for an open position only: Usage <p>The example code below shows how to use the Stop and limit order function example above for the open position only method:</p> TYPESCRIPTJAVASCRIPT <pre><code>if (tradeId) {\nconst openPositions = session.getOpenPositionsManager().getOpenPositionsSnapshot();\nif (openPositions.length &gt; 0) {\nthis.printOpenPositionsSnapshot(openPositions);\nreturn this.attachStopLimitOrderForTrade(session, options.tradeId, options.orderType, this.timeout);\n}\nelse {    Printer.print(`No open positions`)\nthis.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\n</code></pre> <pre><code>if (tradeId) {\nlet openPositions = session.getOpenPositionsManager().getOpenPositionsSnapshot();\nif (openPositions.length &gt; 0) {\n_this.printOpenPositionsSnapshot(openPositions); // show properties\nreturn _this.attachStopLimitOrderForTrade(session, tradeId, orderType, _this.timeout);\n}\nelse {\nconsole.log(\"No open positions\");\n_this.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\n</code></pre> <p>See also IOpenPositionsManager, getOpenPositionsSnapshot</p> Stop and limit order for order only <p>This method below shows how to create a stop and limit order for order only</p> TYPESCRIPTJAVASCRIPT <pre><code>private attachStopLimitOrderForOrder = async (session: FXConnectLite.IFXConnectLiteSession, orderId: string, type: string, timeout : number) =&gt; {\nreturn new Promise&lt;void&gt;(async (resolve, reject) =&gt; {\nlet manager = session.getOrdersManager();\nconst order = session.getOrdersManager().getOrderById(orderId);\n\nif (type === 'stop') {\nlet builder = manager.getRequestFactory().createStopOrderRequestBuilder();\nbuilder.setOrderId(order.getOrderId());\nbuilder.setRate(order.getRate() + order.getRate()/100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nlet builder = manager.getRequestFactory().createLimitOrderRequestBuilder();\nbuilder.setOrderId(order.getOrderId());\nbuilder.setRate(order.getRate() - order.getRate()/100);\nmanager.createLimitOrder(builder.build());\n}\n\nsetTimeout(function () { resolve(); }, timeout);\n});\n}\n</code></pre> <pre><code>this.attachStopLimitOrderForOrder = function (session, orderId, type, timeout){\nreturn new Promise(function (resolve, reject) {\nmanager = session.getOrdersManager();\norder = session.getOrdersManager().getOrderById(orderId); //get order by order Id\nif (type === 'stop') {\nbuilder = manager.getRequestFactory().createStopOrderRequestBuilder(); // if stop create stop order using builder\nbuilder.setOrderId(order.getOrderId());\nbuilder.setRate(order.getRate() + order.getRate() / 100);\nmanager.createStopOrder(builder.build());\n}\nelse {\nbuilder = manager.getRequestFactory().createLimitOrderRequestBuilder(); //create limit order using builder\nbuilder.setOrderId(order.getOrderId());\nbuilder.setRate(order.getRate() - order.getRate() / 100);\nmanager.createLimitOrder(builder.build());\n}\nsetTimeout(function () { resolve(); }, timeout);\nresolve();\n});\n};\n</code></pre> <p>See also OpenPosition, IOrdersManager, createStopOrder, createLimitOrder, Order, getRequestFactory, createStopOrderRequestBuilder, StopOrderRequestBuilder</p> Stop and limit order for order only: Usage <p>The example code below shows how to use the Stop and limit order method for order only</p> TYPESCRIPTJAVASCRIPT <pre><code>if (orderId) {\nconst orders = session.getOrdersManager().getOrdersSnapshot();\nif (orders.length &gt; 0) {\nthis.printOrdersSnapshot(orders);\nreturn this.attachStopLimitOrderForOrder(session, options.orderId, options.orderType, this.timeout);\n}\nelse {\nPrinter.print(`No open positions`)\nthis.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n} </code></pre> <pre><code>if (orderId) {\nvar orders = session.getOrdersManager().getOrdersSnapshot();\nif (orders.length &gt; 0) {\n_this.printOrdersSnapshot(orders); //show properties\nreturn _this.attachStopLimitOrderForOrder(session, orderId, orderType, _this.timeout);\n}\nelse {\nconsole.log(\"No open positions\");\n_this.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n}\nelse {\nconsole.log(\"Error: OrderId or tradeId must be specified.\");\n_this.logout(session, orderChangeListener);\nprocess.exit(0);\n}\n</code></pre> <p>See also IOrdersManager, getOrdersSnapshot</p> <p>Download the sample TypeScript, JavaScript</p> <p>In order to perform changes to Stop/Limit, you should understand that the sto pand limits are also orders,  however they are orders specifically associated with an open position order or order.  So, you first need to get the main order and then locate the associated Stop/Limit order and then perform an update on that order or Cancel it.</p> <p>See Also ...</p>"},{"location":"trading/closeallpositions/","title":"Close All Open Positions","text":"<p>How to close all positions and orders</p> <p>Sometimes, you may want to close all your positions and orders in the trading platform, for example, when you want to exit the market or switch to a different account. To do this, you need to use the FCLite library and its classes and methods.</p>"},{"location":"trading/createamarketorder/","title":"Create A Market Order","text":"<p>How to create a market order</p> <p>The FCLite API allows you to programmatically create a market order on the FCLite platform. A market order is a type of order that executes immediately at the current market price of an instrument. An instrument is a financial asset that can be traded, such as a stock, a currency pair, or a commodity. Each instrument has a symbol, a name, a type, and other attributes.</p>"},{"location":"trading/createanentryorder/","title":"Create An Entry Order","text":"<p>How to create an entry order</p> <p>This article will show you how to create an entry order, which is a type of order that is executed when the market price reaches a specified level.  You can use entry orders to enter a trade at a favorable price or to set a stop-loss or take-profit for an existing trade.</p> <p>Steps</p> <p>To create an entry order, you need to follow these steps:</p> <p>Create an EntryOrderFactory object, which is a helper class that helps you set up the order parameters, such as the instrument, the direction, the amount, the price,  and the expiration date. </p> <p>You can use the following code to create an EntryOrderFactory object:</p> TYPESCRIPTJAVASCRIPT <p>``` typescript class EntryOrderFactory {     static create(manager, offersManager, accountId, offerId, amount) {</p> <pre><code>    let offer = offersManager.getOfferById(offerId);\n\n    return manager.getRequestFactory().createEntryOrderRequestBuilder()\n    .setAccountId(accountId)\n    .setAmount(amount)\n    .setOfferId(offerId)\n    .setBuySell('B')\n    .setTimeInForce('GTC')\n    .setCustomId('custom-id-open')\n    .setLimitRate(offer.getAsk() + offer.getAsk() / 90)\n    .setStopRate(offer.getAsk() - offer.getAsk() / 100)\n    .setRate(offer.getAsk() + offer.getAsk() / 100)\n    .setRateRange(10)\n    .enableTrailingStop(FXConnectLite.TrailingStopType.Fixed, 10)\n    .build();\n}\n</code></pre> <p>}     ```</p> <pre><code>let EntryOrderFactory = /** @class */ (function () {\nfunction EntryOrderFactory() {\n}\nEntryOrderFactory.create = function (manager, offersManager, accountId, offerId, amount) {\nvar offer = offersManager.getOfferById(offerId);\nreturn manager.getRequestFactory().createEntryOrderRequestBuilder()\n.setAccountId(accountId)\n.setAmount(amount)\n.setOfferId(offerId)\n.setBuySell('B')\n.setTimeInForce('GTC')\n.setCustomId('custom-id-open')                      .setLimitRate(offer.getAsk() + offer.getAsk() / 90)\n.setStopRate(offer.getAsk() - offer.getAsk() / 100)\n.setRate(offer.getAsk() + offer.getAsk() / 100)\n.setRateRange(10)\n.enableTrailingStop(FXConnectLite.TrailingStopType.Fixed, 10)\n.build();\n};\nreturn EntryOrderFactory;\n}());\n</code></pre> <p>For more information about the EntryOrderFactory class and its methods, see IOrdersManager, getRequestFactory,IOrdersRequestBuilderFactory, EntryOrderRequestBuilder.</p> <p>Use the EntryOrderFactory object to create an entry order request, which is an object that contains all the information needed to place the order. </p> <p>You can use the following code to create an entry order request:</p> TYPESCRIPTJAVASCRIPT <pre><code>let offerId = instrument.getOfferId();\nconst amount = 100; //any integer\n//create ordersManager\nlet manager = session.getOrdersManager();\n//create offersManager\nlet offersManager = session.getOffersManager();\n//create accountManager\nlet accountsManager = session.getAccountsManager();\n//get first account\nconst account = accountsManager.getAccountById(accountsManager.getAccountsInfo()[0].getId());\n//create request using our custom order factory\nlet request = EntryOrderFactory.create(manager, offersManager, account.getAccountId(), offerId, amount);\n//create entry order\nmanager.createEntryOrder(request);\n</code></pre> <pre><code>var offerId = instrument.getOfferId();\nvar amount = 100; //any integer\n//create ordersManager\nvar manager = session.getOrdersManager();\n//create offersManager\nvar offersManager = session.getOffersManager();\n//create accountManager\nvar accountsManager = session.getAccountsManager();\n//get first account\nvar account = accountsManager.getAccountById(accountsManager.getAccountsInfo()[0].getId());\n//create request using our custom order factory\nvar request = EntryOrderFactory.create(manager, offersManager, account.getAccountId(), offerId, amount);\n//create entry order\nmanager.createEntryOrder(request);\n</code></pre> <p>For more information about the createEntryOrder method and its parameters, see createEntryOrder.</p> <p>You can download and run the sample TypeScript and JavaScript files to see how to create an entry order in action.</p>"},{"location":"trading/createclosemarketorder/","title":"Create A Close Market Order","text":"<p>How to create a close market order</p> <p>A close market order is a type of order that closes an existing position at the current market price. It is the simplest and fastest way to exit the market and lock in your profit or loss.</p> <p>To create a close market order, you need to use the FCLite library and its classes and methods.</p>"},{"location":"trading/getallaccounts/","title":"Get All Accounts","text":"<p>How to get a list of accounts</p> <p>The FCLite API allows you to programmatically access the accounts of your customers. An account is a record of the financial transactions of a customer with FCLite. A customer can have multiple accounts for different purposes, such as trading, investing, or saving. Each account has a unique number and a balance.</p>"},{"location":"trading/getallorders/","title":"Get All Orders","text":"<p>How to get a list of all orders</p> <p>An order is a request to buy or sell an instrument at a specified price or condition. An order can be active, meaning it is waiting to be executed, or filled, meaning it has been executed and resulted in a position.</p> <p>To get a list of all orders, you need to use the FCLite library and its classes and methods.</p>"},{"location":"trading/getavailableinstruments/","title":"Get Available Instruments","text":"<p>How to get available instruments</p> <p>The FCLite API allows you to programmatically access the list of available instruments on the FCLite platform. An instrument is a financial asset that can be traded, such as a stock, a currency pair, or a commodity. Each instrument has a symbol, a name, a type, and other attributes.</p>"},{"location":"trading/getclosedpositions/","title":"Get Closed Positions","text":"<p>How to get a list of closed positions</p> <p>A closed position is a position that has been closed by an order or manually by the trader. A closed position shows the final result of the trade, such as the profit or loss, the open and close prices, and the duration of the trade.</p> <p>To get a list of closed positions, you need to use the FCLite library and its classes and methods.</p>"},{"location":"trading/getinstrumentbysymbol/","title":"Get Instrument By Symbol","text":"<p>How to get an instrument by symbol</p> <p>The FCLite API allows you to programmatically access the details of any instrument that is available on the FCLite platform. An instrument is a financial asset that can be traded, such as a stock, a currency pair, or a commodity. Each instrument has a symbol, a name, a type, and other attributes.</p>"},{"location":"trading/getopenpositions/","title":"Get Open Positions","text":"<p>How to get a list of open positions</p> <p>The FCLite API allows you to programmatically access your open positions. An open position is a trade that you have entered but not yet closed. It shows the instrument, the direction, the quantity, the entry price, and the current profit or loss of the trade.</p>"},{"location":"trading/getsubscribedinstruments/","title":"Get Subscribed Instruments","text":"<p>How to get a list of subscribed instruments</p> <p>The FCLite API allows you to programmatically access your subscribed instruments. A subscribed instrument is an instrument that you have chosen to receive price updates for. An instrument is a financial asset that can be traded, such as a stock, a currency pair, or a commodity. Each instrument has a symbol, a name, a type, and other attributes.</p>"},{"location":"trading/retreivehistoricalpricesforaninstrument/","title":"Get Historical Prices for an Instrument","text":"<p>How to get historical prices for an instrument</p> <p>The FCLite API allows you to programmatically access the historical prices for any instrument that is available on the FCLite platform. An instrument is a financial asset that can be traded, such as a stock, a currency pair, or a commodity. A historical price is the price of an instrument at a specific point in time in the past.</p>"},{"location":"trading/retreivepriceupdatesforaninstrument/","title":"Get Prices Updates for an Instrument","text":"<p>How to get a price update for an instrument</p> <p>The FCLite API allows you to programmatically access the current price for any instrument that is available on the FCLite platform. An instrument is a financial asset that can be traded, such as a stock, a currency pair, or a commodity. A price update is the latest information about the price of an instrument, such as the bid, ask, and spread.</p>"},{"location":"trading/subscribeandunsubscribetoinstruments/","title":"Subscribe To Or Unsucribe From An Instrument","text":"<p>How to create a market order</p> <p>The FCLite API allows you to programmatically create a market order on the FCLite platform. A market order is a type of order that executes immediately at the current market price of an instrument. An instrument is a financial asset that can be traded, such as a stock, a currency pair, or a commodity. Each instrument has a symbol, a name, a type, and other attributes.</p>"}]}